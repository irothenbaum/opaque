{"version":3,"sources":["webpack://opaque/webpack/universalModuleDefinition","webpack://opaque/webpack/bootstrap","webpack://opaque/webpack://twocylinder/webpack/universalModuleDefinition","webpack://opaque/webpack://twocylinder/webpack/bootstrap","webpack://opaque/webpack://twocylinder/src/engine/utilities.js","webpack://opaque/webpack://twocylinder/src/engine/root.js","webpack://opaque/webpack://twocylinder/src/engine/generic.js","webpack://opaque/webpack://twocylinder/src/engine/bounding/bounding.js","webpack://opaque/webpack://twocylinder/src/engine/bounding/bounding_point.js","webpack://opaque/webpack://twocylinder/src/engine/bounding/bounding_circle.js","webpack://opaque/webpack://twocylinder/src/engine/vector.js","webpack://opaque/webpack://twocylinder/src/engine/appearance.js","webpack://opaque/webpack://twocylinder/src/engine/bounding/bounding_box.js","webpack://opaque/webpack://twocylinder/src/engine/background.js","webpack://opaque/webpack://twocylinder/src/io/event.js","webpack://opaque/webpack://twocylinder/src/io/touch.js","webpack://opaque/webpack://twocylinder/src/sprites/joystick.js","webpack://opaque/webpack://twocylinder/src/build.js","webpack://opaque/webpack://twocylinder/src/engine/controller.js","webpack://opaque/webpack://twocylinder/src/engine/entity.js","webpack://opaque/webpack://twocylinder/src/engine/game.js","webpack://opaque/webpack://twocylinder/src/engine/particle.js","webpack://opaque/webpack://twocylinder/src/engine/particle_emitter.js","webpack://opaque/webpack://twocylinder/src/engine/view.js","webpack://opaque/webpack://twocylinder/src/engine/world.js","webpack://opaque/webpack://twocylinder/src/io/joystick.js","webpack://opaque/./src/game/enemies/enemy.js","webpack://opaque/./src/main.js","webpack://opaque/(webpack)/buildin/module.js","webpack://opaque/./src/game_settings.js","webpack://opaque/./src/game/level_controller.js","webpack://opaque/./src/game/enemy_controller.js","webpack://opaque/./src/game/enemies/pixel.js","webpack://opaque/./src/game/sprites/enemies/pixel.js","webpack://opaque/./src/game/sprites/enemies/enemy.js","webpack://opaque/./src/game/levels/level.js","webpack://opaque/./src/game/color-map.js","webpack://opaque/./src/game/player.js","webpack://opaque/./src/game/sprites/player.js","webpack://opaque/./src/game/io/mouseControl.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_typeof2","__WEBPACK_AMD_DEFINE_ARRAY__","undefined","__WEBPACK_AMD_DEFINE_RESULT__","__WEBPACK_AMD_DEFINE_FACTORY__","apply","Vector","require","Constants","TAU","Math","Functions","disjoinArray2FromArray1","array1","array2","onEachMatchCallback","j","length","__id","clone","obj","Geometry","boxCollidesBox","box1","box2","xOverlap","origin_x","width","yOverlap","origin_y","height","boxCollidesCircle","box","circle","point1","x","y","point2","point3","point4","line1","line2","line3","line4","boxCollidesPoint","point","circleCollidesCircle","circle1","circle2","this","distanceToPoint","radius","circleCollidesBox","circleCollidesLine","line","isSegment","circleCollidesPoint","lineIntersectsCircle","b","a","eDistAtoB","e","eDistCtoE","retVal","dt","f","g","parseInt","lineCollidesCircle","intersects","lineCollidesPoint","angleToPoint1","angleToPoint2","pointCollidesCircle","pointCollidesBox","pointCollidesPoint","pointCollidesLine","angleToPoint","inDegrees","radians","PI","pointToPoint","speed","direction","pointFromVector","vector","getSpeed","getRandomDirection","Root","_classCallCheck","Bounding","Generic","options","_this","_possibleConstructorReturn","_getPrototypeOf","setBounding","bounding","_bounding","collides","rotation","tuple","setCenter","_this2","_typeof","set","_toConsumableArray","BoundingPoint","BoundingCircle","assign","__direction","__speed","dir","friction","currentDirection","getDirection","directionDiff","setDirection","Appearance","canvas","entity","context","BoundingBox","containingBox","getContainingRectangle","myBox","targetX","targetY","Background","color","_color","view","getCanvas","containingRectangle","Event","evt","el","target","isNaN","offsetTop","world_x","getResolution","world_y","rect","getBoundingClientRect","device_x","left","device_y","top","timestamp","Date","now","TAP","DOUBLE","LONG","MOVE","UP","DOWN","linked_event","velocity","eventType","type","Touch","getBounding","double","tap","tap_distance","__view","_doubleTapThreshold","_tapThreshold","_tapDistanceThreshold","_longTapCancel","absolute","__boundToWorld","_lastUp","_lastDown","_lastMove","val","__getListenersByType","_assertThisInitialized","__key","__isDown","__isTracking","that","addEventListener","addIO","getAppearance","draw","getCenter","app","__appearance","event","__formatTouchEvent","__lastDown","__fireEvent","isDown","found","__lastUp","lastDownDiff","isTracking","__lastMove","handlers","getType","group","push","shift","callback","prop","array","__formatListener","__on","__off","status","touches","step","getWorldCenter","Joystick","scale","joystick","getDrawOptions","operating","Controller","Entity","Game","Particle","ParticleEmitter","View","EngineContainer","World","UtilitiesContainer","IOContainer","JoystickSprite","TwoCylinder","Engine","IO","Sprites","Josystick","Utilities","__world","world","worldClock","rotation_lag","appearance","setAppearance","_velocity","_rotationLag","_rotation","_collisionGroup","__collisionGroupListening","__visible","center_x","center_y","other","collisionFunction","objectIsCollidable","groupIsCollidable","getCollisionGroup","getVelocity","rotateTowards","setSpeed","isVisible","vis","getWorld","start","exit","w","id","__emitter","emitter","clock","removeParticle","__particles","__toRemove","__isEmitting","__particleKey","getParticles","forEach","__removeParticles","isEmitting","particle","particleType","newParticle","__canvas","_resolution","style","__followInstance","__ios","__toRemoveIOs","__ioKey","getContext","clearRect","time","setCenterWithinBounding","clearCanvas","getBackground","getInstances","inst","getParticleEmitters","part","__removeIOs","getIOs","io","instance","_fps","__instances","__particleEmitters","__controllers","__views","__toRemoveParticleEmitters","__toRemoveInstances","__toRemoveControllers","__toRemoveViews","__collisionGroups","__background","__instanceKey","__viewKey","__emitterKey","__controllerKey","__clock","__intervalId","setInterval","loop","cont","__removeControllers","__removeParticleEmitters","__removeViews","__removeInstances","_this3","__preStep","me","hasCollisionChecking","getCollidableGroups","myCollisionGroups","__postStep","clearInterval","_this4","__removeFromCollisionGroup","__addToCollisionGroup","_this5","removeInstance","v","_this6","removeParticleEmitter","controller","background","splice","_defaultRadius","__isHeld","__pullRatio","__operateFunction","_previousEvent","onDown","linkEvent","onUp","onMove","stick","TC","Enemy","setPosition","__pixelValue","pixel","__pixelIndex","index","__health","rgbArray","maximumValue","ratio","round","getHealthFromRGBValues","constructor","healthMultiplier","GameSettings","LevelController","Player","MouseControl","desiredWidth","desiredHeight","OpaqueGame","document","getElementById","gameSettings","DEBUG","enter","state","beforeChange","enterMenu","enterGame","enterStory","afterChange","setWorld","gameBackground","fps","dimensions","getScreenDimensions","resolution","addView","player","addInstance","levelController","addController","menuBackground","alert","innerWidth","innerHeight","webpackPolyfill","deprecate","paths","children","health","imageSize","palette","EnemyController","Level","currentLevel","levelIsActive","levelIsLoading","enemyController","_get","advanceLevel","console","log","level","levelData","LEVELS","imgFile","Image","crossOrigin","onload","image","onLevelEnd","handleLevelEnd","src","imageName","colorCount","PixelEnemy","ENEMY_CREATE_DELAY_CONSTANT","levelInstance","digestLevelData","enemyCreationTimeout","diceSides","floor","random","NUMBER_CREATED","enemyQueue","startingQueueSize","getColorCount","createEnemyInstanceFromEnemyData","pop","colors","imageData","getImageData","advancedEnemyProportion","colorKey","join","enemy","reverse","enemyData","enemyInstance","worldWidth","removeAllInstance","removeAllParticleEmitters","PixelSprite","Pixel","size","targetSpeed","arguments","straightDown","targetDirection","getPosition","difference","isLessThan","min","abs","EnemySprite","_this$__getDrawConsts","__getDrawConsts","sideSize","startingX","startingY","borderRadius","drawRoundedRectangle","getColorStyle","_this$__getDrawConsts2","barWidth","getHP","HP_CYAN","cyanBorders","cyanStartingChange","COLOR_CYAN","HP_MAGENTA","magentaStartingChange","fillStyle","COLOR_MAGENTA","fill","HP_YELLOW","yellowBorders","yellowStartingChange","COLOR_YELLOW","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","halfSide","EnemyEntity","memoizedHealth","drawingAnimation","showingHP","currentHealth","health1","health2","hasHealthChanged","drawHealth","hasHealthRemaining","drawDying","drawNormal","drawDamaged","MMCQ","data","imageFile","imageDataFromImage","numberOfColors","createElement","drawImage","pixelData","formattedData","cmap","quantize","map","pv","slice","naturalOrder","sum","reduce","max","sigbits","rshift","maxIterations","fractByPopulations","getColorIndex","PQueue","comparator","contents","sorted","sort","peek","debug","VBox","r1","r2","g1","g2","b1","b2","histo","CMap","vboxes","vbox","count","volume","medianCutApply","rw","gw","bw","maxw","copy","k","total","partialsum","lookaheadsum","doCut","right","vbox1","vbox2","d2","dim1","dim2","count2","force","_volume","_count_set","npix","_count","avg","_avg","hval","ntot","mult","rsum","gsum","bsum","contains","rval","gval","bval","vb","nearest","d1","pColor","sqrt","pow","forcebw","lowest","idx","highest","pixels","maxcolors","Array","getHisto","rmin","rmax","gmin","gmax","bmin","bmax","vboxFromPixels","pq","iter","lh","ncolors","niters","pq2","PlayerSprite","opacity","replace","originX","ydiff","originY","xdiff","translate","rotate","drawTurret","drawMuzzle","drawBarrel","muzzleWidth","drawStock","barrelWidth","drawVision","strokeStyle","stroke","gradient","createLinearGradient","addColorStop","stockWidth","turretCenterX","turretCenterY","arc","bulbX","visionWidth","bulbY","shine","createRadialGradient","getAmmoColor","__player"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,YAAAH,GACA,iBAAAC,QACAA,QAAA,OAAAD,IAEAD,EAAA,OAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,kRClFA,SAAAzC,EAAAC,GACA,WAAAyC,EAAAxC,IAAA,WAAAwC,EAAAvC,GACAA,EAAAD,QAAAD,KAEA0C,UAAAC,KAAAC,EAAA,mBAAAC,EAAA,GAAAA,EAAAC,MAAA7C,EAAAyC,GAAAG,KAAA3C,EAAAD,QAAA2C,IAJA,CASCvC,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,WAAAa,EAAAf,SAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,IDxEA,kBEVA,IAAMO,EAASC,EAAf,GAEAC,WACIC,IAAgB,EAAVC,SAGVC,WACIC,wBADQ,SAAAC,EAAAC,EAAAC,GAKJ,IAAA/C,EACAgD,EAJA,GAAKF,EAALG,OAKA,IAAKjD,EAAL,EAAUA,EAAE8C,EAAZG,OAA2BjD,IACvB,IAAIgD,EAAJ,EAASA,EAAEH,EAAXI,OAA0BD,IACtB,GAAGH,YAAmBC,KAAtBI,KAAqC,CACjC,mBAAIH,GACAA,EAAoBF,EAApBE,WAEGF,KAAPK,KACAL,cACA,QAKhBM,MApBQ,SAAAC,GAsBJ,OAAO1C,cAAeA,cAAeA,sBAA9BA,IAAP0C,KAIRC,UAIIC,eAJO,SAAAC,EAAAC,GAOH,IAAIC,EAEMF,YAAiBC,EAAnBE,UAEGH,WAAgBA,EAAjBI,MAA+BH,EAHrCE,UAOMF,YAAiBD,EAAnBG,UAEGF,WAAgBA,EAAjBG,MAA+BJ,EAVzCG,SAaIE,EAEML,YAAiBC,EAAnBK,UAEGN,WAAgBA,EAAjBO,OAAgCN,EAHtCK,UAOML,YAAiBD,EAAnBM,UAEGL,WAAgBA,EAAjBM,OAAgCP,EAV1CM,SAcA,OAAOJ,GAAPG,GAEHG,kBApCM,SAAAC,EAAAC,GAqCH,IAAIC,GAAUC,EAAEH,EAAHN,SAAiBU,EAAEJ,EAAIH,UAChCQ,GAAUF,EAAEH,WAAeA,EAAlBL,MAA6BS,EAAEJ,EAAIH,UAC5CS,GAAUH,EAAEH,WAAeA,EAAlBL,MAA6BS,EAAEJ,WAAeA,EAAIF,QAC3DS,GAAUJ,EAAEH,EAAHN,SAAiBU,EAAEJ,WAAeA,EAAIF,QAE/CU,GAAQN,EAAZG,GACII,GAAQJ,EAAZC,GACII,GAAQJ,EAAZC,GACII,GAAQJ,EAAZL,GAEA,OAAOb,gCACAA,iCADAA,IAEAA,iCAFAA,IAGAA,iCAHAA,IAIAA,iCAJP,IAMHuB,iBArDM,SAAAZ,EAAAa,GAsDH,OAEUA,KAAWb,EAAbN,UAEGM,WAAeA,EAAhBL,OAA8BkB,EAHpCV,GAOMU,KAAWb,EAAbH,UAEGG,WAAeA,EAAhBF,QAA+Be,EAVzCT,GAkBHU,qBAxEM,SAAAC,EAAAC,GAyEH,OAAOC,KAAAC,gBAAAH,EAAAC,GAAyCD,SAAiBC,EAAjEG,QAEHC,kBA3EM,SAAAnB,EAAAD,GA4EH,OAAOX,6BAAPY,IAEHoB,mBA9EM,SAAApB,EAAAqB,EAAAC,GA+EH,OAAOlC,qCAAPkC,IAEHC,oBAjFM,SAAAvB,EAAAY,GAkFH,OAAOxB,+BAAPY,IASHwB,qBA3FM,SAAAH,EAAArB,EAAAsB,GA4FH,IAAIG,EAAIJ,EAAR,GACIK,EAAIL,EAFmC,GAKvCM,EAAYlD,UAAWA,SAASgD,IAAIC,EAAbjD,KAAuBA,SAASgD,IAAIC,EAAbjD,EALP,IAQvCpC,GAAWoF,IAAIC,EAALxB,GAANyB,EAAJtF,GAAoCoF,IAAIC,EAALvB,GAA/BwB,EAKJ1E,EAAKZ,GAAO2D,IAAS0B,EAAjBxB,GAA0B7D,GAAO2D,IAAS0B,EAbPvB,GAgBvCyB,GACA1B,EAAKjD,EAAIZ,EAAOqF,EADZxB,EAEJC,EAAKlD,EAAIZ,EAAOqF,EAFZvB,GAMJ0B,EAAYpD,UAAWA,SAASmD,IAAI5B,EAAbvB,KAA4BA,SAASmD,IAAI5B,EAAbvB,EAAvD,IAEIqD,KAGJ,GAAID,EAAY7B,EAAhBkB,OAAgC,CAE5B,IAAIa,EAAKtD,UAAWA,SAASuB,EAATvB,UAA6BA,WAFrB,IAKxBuD,GACA9B,GAAMjD,EAAD8E,GAAS1F,EAAOqF,EADjBxB,EAEJC,GAAMlD,EAAD8E,GAAS1F,EAAOqF,EAAEvB,GAGxBmB,IAAclC,gCAAjB,IACI0C,UAIJ,IAAIG,GACA/B,GAAMjD,EAAD8E,GAAS1F,EAAOqF,EADjBxB,EAEJC,GAAMlD,EAAD8E,GAAS1F,EAAOqF,EAAEvB,GAGxBmB,IAAclC,gCAAjB,IACI0C,eAEGI,cAAwBA,SAASlC,EAArCkB,UACAI,IAAclC,gCAAjB,IACI0C,WAMR,OAAAA,GAIHK,mBAzJM,SAAAd,EAAArB,EAAAsB,GA2JH,OADiBlC,kCAAjBkC,GACOc,UAAyBhD,6BAA6BiC,EAA7BjC,GAAhCY,IAGHqC,kBA9JM,SAAAhB,EAAAT,EAAAU,GA+JH,IAAIgB,EAAgBlD,sBAAsBiC,EAAtBjC,GAApBwB,GACI2B,EAAgBnD,sBAAsBiC,EAAtBjC,GAApBwB,GAEIkB,EAASQ,IAJ0BC,EAkBvC,OAVAT,IAEIA,EAASQ,KADTC,EAAgBnD,wBAA6BiC,EAA7CkB,MAIDT,GAAHR,IACIQ,EAAS1C,yBAAyBiC,EAAzBjC,MAA0CA,yBAAyBiC,EAAzBjC,GAA1CA,KACDA,yBAAyBiC,EAAzBjC,GAAiCiC,EADzCS,KAIJA,GAOHU,oBAvLM,SAAA5B,EAAAZ,GAwLH,OAAOZ,+BAA0CY,EAAjDkB,QAEHuB,iBA1LM,SAAA7B,EAAAb,GA2LH,OAAOX,4BAAPwB,IAEH8B,mBA7LM,SAAAzC,EAAAG,GA8LH,OACMH,MAAaG,EAAfF,GAEED,MAAaG,EAHnBD,GAMHwC,kBApMM,SAAA/B,EAAAS,GAqMH,OAAOjC,6BAAPwB,IAMHK,gBA3MM,SAAAhB,EAAAG,GA4MH,IAAIF,EAAID,IAAWG,EAAnBF,EACIC,EAAIF,IAAWG,EAAnBD,EAEA,OAAO1B,UAAWyB,IAAMC,EAAxBA,IAEHyC,aAjNM,SAAA3C,EAAAG,EAAAyC,GAkNH,IAAIC,EAAUrE,WAAW2B,IAAWH,EAAtBxB,EAAgC2B,IAAWH,EAAzDC,GACA,OAAO2C,EAAcC,MAAgBrE,KAArBsE,GAAhBD,GAOHE,aA1NM,SAAA/C,EAAAG,GA2NH,OAAO,IAAA/B,GACH4E,MAAQ7D,2BADMgB,GAEd8C,UAAY9D,8BAQnB+D,gBArOM,SAAAlD,EAAAmD,GAsOH,OACIlD,EAAID,IAAWxB,SAAS2E,EAAT3E,gBAAkC2E,EAD9CC,WAEHlD,EAAIF,IAAWxB,SAAS2E,EAAT3E,gBAAkC2E,eAGxDE,mBA3OM,WA4OH,OAAO7E,gBAAoBA,KAA3BsE,KAIRvH,WACI4D,SADaA,SAEbV,UAFaA,UAGbH,oCC7QJ/C,UALI,SAAA+H,iGAAcC,CAAAxC,KAAAuC,izBCDlB,IAAMA,EAAOjF,EAAb,GACMmF,EAAWnF,EAAjB,GAEMoF,cAEF,SAAAA,EAAAC,GAAsB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA0C,IAClBE,EAAAC,EAAA7C,KAAA8C,EAAAJ,GAAAxH,KAAA8E,KAAA2C,KACAI,YAAiBJ,EAAjBK,UAFkBJ,8OAFJL,oFAORS,GACN,OAAOhD,KAAAiD,WAAkBjD,KAAAiD,UAAAC,SAAzBF,yCAIA,OAAOhD,KAAPiD,8CAGSxC,GACT,KAAGA,GAASA,aAAZgC,GACI,6CAEJ,OAAOzC,KAAAiD,UAAPxC,WAIRjG,8oCCtBA,IAAM+H,EAAOjF,EAAb,GAEMmF,cACF,SAAAA,EAAAE,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAyC,IACjBG,EAAAC,EAAA7C,KAAA8C,EAAAL,GAAAvH,KAAA8E,KAAA2C,KACAQ,SAAA,EACA1H,0BAAgC,SAAA2H,GAC5BR,EAAKQ,EAAL,IAAiBA,EAAjB,KAJaR,8OADFL,uFASf,OAASrD,EAAF,KAAYC,EAAI,wCAEhBiE,GACP,6DAEsBA,EAAMJ,GAE5B,OAAOhD,KAAAqD,UAAPD,oDAGA,OAAS3E,SAAF,KAAmBG,SAAnB,KAAoCF,MAApC,KAAkDG,OAAS,4CAGlE,OAAOmB,KAAPmD,6CAEStH,GACTmE,KAAAmD,SAAAtH,8BAECS,EAAKN,GAAM,IAAAsH,EAAAtD,KAQZ,MAPA,WAAGuD,EAAAjH,GACCb,0BAA4B,SAAA2H,GACxBE,EAAAE,IAAApG,MAAAkG,EAAIG,EAAJL,MAGJpD,KAAA1D,GAAAN,EAEJgE,sCAEMgD,GACN,kBAIRxI,yzBC9CA,IAAMiI,EAAWnF,EAAjB,GACMc,EAAWd,KAAjBc,SAEMsF,sZAAsBjB,uFAEpB,OAASvD,EAAIc,KAANd,EAAcC,EAAIa,KAAKb,qCAEvBiE,GACPpD,KAAAd,EAASkE,EAATlE,EACAc,KAAAb,EAASiE,EAATjE,mDAGA,OACIV,SAAWuB,KADTd,EAEDN,SAAWoB,KAFVb,EAGDT,MAHC,EAIDG,OAAS,oCAGRmE,GACN,OAAGA,aAAHU,EACWtF,0BAAP4E,GACKA,aAAHP,EAGKO,WAAPhD,MAEO5B,2BAAP4E,YAMZxI,yzBCjCA,IAAMiI,EAAWnF,EAAjB,GACMc,EAAWd,KAAjBc,SACMsF,EAAgBpG,EAAtB,GAEMqG,sZAAuBlB,uFAErB,OAASvD,EAAIc,KAANd,EAAcC,EAAIa,KAAKb,qCAEvBiE,GACPpD,KAAAd,EAASkE,EAATlE,EACAc,KAAAb,EAASiE,EAATjE,mDAGA,OACIV,SAAWuB,KAAAd,EAASc,KADlBE,OAEDtB,SAAWoB,KAAAb,EAASa,KAFnBE,OAGDxB,MAAQ,EAAIsB,KAHXE,OAIDrB,OAAS,EAAImB,KAAKE,yCAGjB8C,GACN,OAAGA,aAAHW,EACWvF,4BAAP4E,GACKA,aAAHU,EACKtF,2BAAP4E,GACKA,aAAHP,EAGKO,WAAPhD,MAEO5B,2BAAP4E,YAKZxI,yzBCjCA,IAAM+H,EAAOjF,EAAb,GACMC,EAAYD,KAAlBC,UAEMF,cACF,SAAAA,EAAAsF,GAAsB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA3C,GAClBuF,EAAAC,EAAA7C,KAAA8C,EAAAzF,GAAAnC,KAAA8E,KAAA2C,IACAA,EAAUlH,OAAAmI,QACN1B,UADoB,EAEpBD,MAAQ,GAFZU,GAKAC,EAAAiB,YAAmBlB,EAAnBT,UACAU,EAAAkB,QAAenB,EAAfV,MARkBW,8OADLL,0FAeb,OAAOvC,KAAP6D,+CAGA,OAAO7D,KAAP8D,6CAEUC,GACV/D,KAAA6D,YAAAE,mCAEO9B,GACPjC,KAAA8D,QAAA7B,wCAKW8B,EAAKC,GAChB,IAAIC,EAAmBjE,KAAvBkE,eACIC,GAAiBJ,EAAMxG,EAANwG,IAADE,GAA2C1G,EAA/DC,IAEAwG,EAAWA,GAAXA,EACIG,GAAkB1G,KAAtBsE,GACI/B,KAAAoE,aAAkBH,EAAoBE,EAAtCH,GAEAhE,KAAAoE,aAAkBH,GAAuBE,EAAgB1G,KAAlBsE,IAAvCiC,YAMZxJ,yzBC7CA,IAAMkI,EAAUpF,EAAhB,GAEM+G,cACF,SAAAA,EAAA1B,GAAsB,mGAAAH,CAAAxC,KAAAqE,GAAAxB,EAAA7C,KAAA8C,EAAAuB,GAAAnJ,KAAA8E,KAAA2C,gPADDD,gFAKf4B,EAAQpF,EAAGC,EAAGoF,GAChB,IAAIC,EAAUF,aAAd,MACAE,cACAA,eAAyB,EAAI/G,KAA7B+G,OACAA,mBACAA,SACAA,cACAA,wBACAA,oBAIRhK,yzBCvBA,IAAMiI,EAAWnF,EAAjB,GACMc,EAAWd,KAAjBc,SACMuF,EAAiBrG,EAAvB,GACMoG,EAAgBpG,EAAtB,GAEMmH,sZAAoBhC,uFAElB,OACIvD,EAAIc,KAAAvB,SAAiBuB,KAAAtB,MADlB,EAEDS,EAAIa,KAAApB,SAAiBoB,KAAAnB,OAAc,qCAGlCuE,GACPpD,KAAAvB,SAAgB2E,IAAWpD,KAAAtB,MAA3B,EACAsB,KAAApB,SAAgBwE,IAAWpD,KAAAnB,OAA3B,kDAGqBuE,EAAOJ,GAC5B,IAAI0B,EAAgB1B,EAApB2B,yBACIC,EAAQ5E,KAAZ2E,yBAGIE,EAAUzB,EAAdlE,EACI4F,EAAU1B,EAAdjE,EAEGuF,QAAsBE,EAAzBlG,MACImG,EAAU7B,cAAV6B,GAGAA,EAAUpH,SAAS2F,EAAT3F,EAAkBiH,WAAyBA,EAAzBA,MAAgDE,QAF3E,GAIDC,EAAUpH,WAAkBiH,WAA0BE,QAJrD,IAUFF,SAAuBE,EAA1B/F,OACIiG,EAAU9B,cAAV8B,GAGAA,EAAUrH,SAAS2F,EAAT3F,EAAkBiH,WAAyBA,EAAzBA,OAAiDE,SAF5E,GAIDE,EAAUrH,WAAkBiH,WAA0BE,SAJrD,IAQL5E,KAAAqD,WAAiBnE,EAAF2F,EAAgB1F,EAAI2F,qDAInC,OACIrG,SAAWuB,KADRvB,SAEFG,SAAWoB,KAFTpB,SAGFF,MAAQsB,KAHNtB,MAIFG,OAASmB,KAAKnB,yCAIbmE,GACN,OAAGA,aAAHyB,EACWrG,sBAAP4E,GACKA,aAAHW,EACKvF,yBAAP4E,GACKA,aAAHU,EACKtF,wBAAP4E,GACKA,aAAHP,EAGKO,WAAPhD,MAEO5B,wBAAP4E,YAKZxI,yzBCxEA,IAAM+H,EAAOjF,EAAb,GAEMyH,cACF,SAAAA,EAAApC,GAAsB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA+E,GAClBnC,EAAAC,EAAA7C,KAAA8C,EAAAiC,GAAA7J,KAAA8E,KAAA2C,IACAA,EAAUlH,OAAAmI,QACNoB,MAAQ,eADZrC,GAGAC,EAAAqC,OAActC,EAAdqC,MALkBpC,8OADDL,gFAQf2C,GACF,IAAIZ,EAASY,EAAbC,YACIC,EAAsBF,gBAA1BP,yBACIH,EAAUF,aAAd,MACAE,cACAA,YAAoBxE,KAApBwE,OACAA,eAAqBY,EAArBZ,MAA+CY,EAA/CZ,QACAA,SACAA,oBAIRhK,k3BCvBA,IAAMkJ,EAAgBpG,EAAtB,GACMc,EAAWd,KAAjBc,SAEMiH,cAYF,SAAAA,EAAAC,EAAAJ,GAAuB,IAAAtC,+FAAAJ,CAAAxC,KAAAqF,GAQnB,IAJA,IAAIE,EAAKD,EAATE,OACItG,EADJ,EAEIC,EAFJ,EAIOoG,IAAOE,MAAMF,EAAbA,cAAgCE,MAAMF,EAA7CG,YACIxG,GAAKqG,aAAgBA,EAArBrG,WACAC,GAAKoG,YAAeA,EAApBpG,UACAoG,EAAKA,EAALA,aASJ,GALA3C,EAAAC,EAAA7C,KAAA8C,EAAAuC,GAAAnK,KAAA8E,MACId,EAAIoG,UADDpG,EAEFC,EAAImG,UAAcnG,KAGvB+F,EAAS,CACLtC,EAAA+C,SAAgB/C,EAAA1D,EAASgG,gBAAVzG,UAAyCyG,EAAxDU,gBACAhD,EAAAiD,SAAgBjD,EAAAzD,EAAS+F,gBAAVtG,UAAyCsG,EAAxDU,gBACA,IAAIE,EAAOZ,cAAXa,wBACAnD,EAAAoD,SAAgBpD,EAAA1D,EAAS4G,EAAzBG,KACArD,EAAAsD,SAAgBtD,EAAAzD,EAAS2G,EAAzBK,IAzBe,OA4BnBvD,EAAAwD,UAAiBC,KAAjBC,MA5BmB1D,8OAZPc,+CAEZ,OACI6C,IADG,MAEHC,OAFG,YAGHC,KAHG,UAIHC,KAJG,YAKHC,GALG,UAMHC,KAAO,sDAkCJtB,GAOP,OALGA,aAAHD,IACIrF,KAAA6G,aAAAvB,EACAtF,KAAA8G,SAAgB1I,eAAsB4B,KAAtB5B,aAAhB4B,OAGJA,qCAEK+G,GACL,QAAGtL,cAAc4J,EAAd5J,wBACC,0BAGJ,OADAuE,KAAAgH,KAAAD,EACA/G,uCAGA,OAAOA,KAAAgH,KAAYhH,KAAZgH,KAAP,8CAGA,OACI9H,EAAGc,KADC2F,QAEJxG,EAAGa,KAAK6F,kBAMpBrL,qvBCzEA,IAAM6K,EAAQ/H,EAAd,IACMc,EAAWd,KAAjBc,SACMsE,EAAUpF,EAAhB,GAEM2J,cACF,SAAAA,EAAAtE,GAAqB,IAAAC,+FAAAJ,CAAAxC,KAAAiH,GAEjBtE,EAAUlH,OAAAmI,QACNZ,SAAWL,OADSuE,cAEnBC,OAFmB,IAGnBC,IAHmB,IAInBC,aAAe,IAJpB1E,IAOAC,uEAAAC,CAAA7C,KAAA8C,EAAAmE,GAAA/L,KAAA8E,KAAA2C,KACA2E,OAAc3E,EAAduC,KAEAtC,EAAAG,YAAiBJ,EAAjBK,UAEAJ,EAAA2E,oBAA2B5E,EAA3BwE,OACAvE,EAAA4E,cAAqB7E,EAArByE,IACAxE,EAAA6E,sBAA6B9E,EAA7B0E,aACAzE,EAAA8E,eAAsB,EAAI9E,EAjBT4E,cAqBd7E,EAAHgF,WACI/E,EAAAgF,gBAAA,GAIJhF,EAAAiF,QAAA,KACAjF,EAAAkF,UAAA,KACAlF,EAAAmF,UA5BiB,KA+BjBtM,cAAc4J,EAAd5J,qBAAyC,SAAAuM,GACrCpF,EAAAqF,qBAAA/M,KAAAgN,IAAAtF,IAAAoF,KAIJpF,EAAA3E,KApCiB,KAuCjB2E,EAAAuF,MAvCiB,EA0CjBvF,EAAAwF,UA1CiB,EA6CjBxF,EAAAyF,cA7CiB,EAgDjB,IAAIC,EAAIJ,IAARtF,IAhDiB,OAiDjBA,EAAA0E,OAAAnC,YAAAoD,iBAAA,YAAqD,SAAAjD,GACjDgD,mCADJ,GAGA1F,EAAA0E,OAAAnC,YAAAoD,iBAAA,aAAsD,SAAAjD,GAClDA,mBACAgD,mCAFJ,GAKA1F,EAAA0E,OAAAnC,YAAAoD,iBAAA,UAAmD,SAAAjD,GAC/CgD,iCADJ,GAGA1F,EAAA0E,OAAAnC,YAAAoD,iBAAA,WAAoD,SAAAjD,GAChDA,mBACAgD,iCAFJ,GAKA1F,EAAA0E,OAAAnC,YAAAoD,iBAAA,YAAqD,SAAAjD,GACjDgD,mCADJ,GAGA1F,EAAA0E,OAAAnC,YAAAoD,iBAAA,YAAqD,SAAAjD,GACjDA,mBACAgD,mCAtEa,GA0EjB1F,EAAA0E,OAAAkB,MAAAN,IAAAtF,KA1EiBA,8OADLF,kFAiFT1C,KAAHyI,iBACIzI,KAAAyI,gBAAAC,KACI1I,KAAAsH,OADJnC,YAEInF,KAAAkH,cAAAyB,YAFJzJ,EAGIc,KAAAkH,cAAAyB,YAHJxJ,EAAAa,4CAWO4I,GACX5I,KAAA6I,aAAAD,wCAGWA,GACX,OAAO5I,KAAP6I,iDASSvD,GACT,IAAIwD,EAAQ9I,KAAA+I,mBAAZzD,GACAwD,IAGAA,UAAczD,cAAdyD,MAEA9I,KAAAoI,UAAA,EACApI,KAAAgJ,WAAAF,EACA9I,KAAAiJ,YAAAH,sCAEOxD,GACP,IAAIwD,EAAQ9I,KAAA+I,mBAAZzD,GACA,GAAAwD,GAII9I,KAAJkJ,SAAA,CAMA,IAAIC,GAZO,EAwBX,GATInJ,KAAAoJ,UACGpJ,KAAAoJ,SAAApC,OAAuB3B,cAD1BkB,KAEIvG,KAAAoJ,SAAAhD,UAA0B0C,EAA3B1C,WAA+CpG,KAFtDuH,sBAIIuB,UAAczD,cAAdyD,QACAK,OAIDA,GAAUnJ,KAAVgJ,YAA8B5K,kBAAyB4B,KAAzB5B,cAAmD4B,KAApFyH,sBAAgH,CAC5G,IAAI4B,EAAeP,YAAkB9I,KAAAgJ,WAArC5C,UACGiD,GAAgBrJ,KAAnBwH,eACIsB,UAAczD,cAAdyD,KACAK,MACKE,GAAgBrJ,KAAnB0H,iBACFoB,UAAczD,cAAdyD,MACAK,MAORA,GACIL,UAAczD,cAAdyD,IAGJA,YAAgB9I,KAAhB8I,YACA9I,KAAAoJ,SAAAN,EACA9I,KAAAiJ,YAAAH,GACA9I,KAAAoI,UAAA,uCAES9C,GACT,GAAKtF,KAALsJ,aAAA,CAIA,IAAIR,EAAQ9I,KAAA+I,mBAAZzD,GACAwD,IAII9I,KAAAgJ,YACGF,YAAkB9I,KAAAgJ,WAAnB5C,WAAiDpG,KADnD0H,gBAGCtJ,kBAAyB4B,KAAzB5B,cAAmD4B,KAHxDyH,wBASAqB,UAAczD,cAAdyD,MACAA,YAAgB9I,KAAhB8I,YACA9I,KAAAuJ,WAAAT,EACA9I,KAAAiJ,YAAAH,0CAMSA,GACT,IAAIU,EAAWxJ,KAAAiI,qBAA0Ba,EAAzCW,WACA,GAAGD,EAAHxL,OACI,IAAI,IAAIjD,EAAR,EAAaA,EAAEyO,EAAfxL,OAAgCjD,IAC5ByO,wDAQIE,EAAMZ,GAIlB,OAHAY,KAAWA,KAAXA,cACA1J,KAAK,SAAL0J,GAAAC,KAAAb,GACA9I,KAAK,SAAL0J,GAAAE,QACA,8CAOcC,GACd,OACIvN,MAAQ0D,KADLmI,MAEF0B,SAAWA,gDAOE7C,GAClB,IAAAA,EACI,YAEJ,IAAI8C,EAAO,KAAA9C,EAAX,YAIA,OAHIhH,KAAJ8J,KACI9J,KAAA8J,OAEG9J,KAAP8J,gCAME9C,EAAK6C,GACK7J,KAAAiI,qBAAZjB,GACA+C,KAAW/J,KAAAgK,iBAAXD,kCAKG/C,EAAK6C,GAER,IADA,IAAIE,EAAQ/J,KAAAiI,qBAAZjB,GACQjM,EAAR,EAAaA,EAAEgP,EAAf/L,OAA6BjD,IACtBgP,gBAAHF,UACWE,EAAPhP,oCAQF8O,GACN7J,KAAAiK,KAAU5E,cAAVmB,OAAAqD,qCAEOA,GACP7J,KAAAkK,MAAW7E,cAAXmB,OAAAqD,kCAEIA,GACJ7J,KAAAiK,KAAU5E,cAAVoB,KAAAoD,mCAEKA,GACL7J,KAAAkK,MAAW7E,cAAXoB,KAAAoD,iCAGGA,GACH7J,KAAAiK,KAAU5E,cAAVkB,IAAAsD,kCAEIA,GACJ7J,KAAAkK,MAAW7E,cAAXkB,IAAAsD,kCAGIA,GACJ7J,KAAAiK,KAAU5E,cAAVuB,KAAAiD,mCAEKA,GACL7J,KAAAkK,MAAW7E,cAAXuB,KAAAiD,kCAGIA,GACJ7J,KAAAiK,KAAU5E,cAAVqB,KAAAmD,mCAEKA,GACL7J,KAAAkK,MAAW7E,cAAXqB,KAAAmD,gCAGEA,GACF7J,KAAAiK,KAAU5E,cAAVsB,GAAAkD,iCAEGA,GACH7J,KAAAkK,MAAW7E,cAAXsB,GAAAkD,oCAOA,OAAO7J,KAAPoI,+CAGW+B,GACXnK,KAAAqI,aAAA8B,uCAIA,OAAOnK,KAAPqI,wDAOgB/C,GAQhB,IAAI8E,EAAU9E,iBAAqBA,EAArBA,kBAEd,GAAG8E,EAAHpM,OAAkB,CACd,IAAI8K,GAAJ,EACIuB,EAAJ,EAEA,EAAE,CACE,KAAGA,EAAOD,EAAVpM,QAII,SAHAsH,UAAc8E,KAAd9E,QACAA,UAAc8E,KAAd9E,QAIJwD,EAAQ,IAAAzD,EAAAC,EAActF,KAAtB8I,QACAuB,WACIrK,KAAAkD,SAAc4F,EATtBwB,wBAYA,GADAxB,MAAQ,IAAAzD,EAAAC,EAActF,KAAtB8I,SACI9I,KAAAkD,SAAc4F,MAAlBwB,kBACI,SAIR,OAAAxB,eAIRtO,yzBCtWA,IAAM6J,EAAa/G,EAAnB,GACMqG,EAAiBrG,EAAvB,GAEMiN,cACF,SAAAA,iGAAc/H,CAAAxC,KAAAuK,GACV,IAAI5H,GACAK,SAAW,IAAAW,GACPzE,EAD0B,EAEzBC,EAFyB,EAGzBe,OAAS,MALR,OAAA2C,EAAA7C,KAAA8C,EAAAyH,GAAArP,KAAA8E,KAAA2C,gPADK0B,gFAYbC,EAAOpF,EAAEC,EAAEgE,EAASqH,EAAMC,GAC5B,IAAI9H,EAAU8H,EAAdC,iBACIlG,EAAUF,aAFuB,MAKlC3B,EAAHgI,YACInG,cACAA,gBAA0B,EAAI/G,KAA9B+G,OACAA,gCACAA,SACAA,cACAA,kCACAA,YAGJA,cACAA,eAAyB,EAAI/G,KAA7B+G,OACAA,sBACAA,SACAA,cACAA,wBACAA,WAEAA,cACAA,eACAA,wBACAA,kBACAA,SAAe7B,QAAf6B,EAAgC7B,QAAhC6B,GACAA,cACAA,WAEAA,cACAA,MAAY7B,QAAZ6B,EAA6B7B,QAA7B6B,OAAqD,EAAI/G,KAAzD+G,OACAA,sBACAA,SACAA,cACAA,wBACAA,WAEAA,cACAA,MAAY7B,UAAZ6B,EAAiC7B,UAAjC6B,MAA4D,EAAI/G,KAAhE+G,OACAA,sBACAA,kBAIRhK,6BCjEA,IAAMiI,EAAWnF,EAAjB,GACMoG,EAAgBpG,EAAtB,GACMqG,EAAiBrG,EAAvB,GACMmH,EAAcnH,EAApB,GAEM+G,EAAa/G,EAAnB,GACMyH,EAAazH,EAAnB,GACMsN,EAAatN,EAAnB,IACMuN,EAASvN,EAAf,IACMwN,EAAOxN,EAAb,IACMoF,EAAUpF,EAAhB,GACMyN,EAAWzN,EAAjB,IACM0N,EAAkB1N,EAAxB,IACMiF,EAAOjF,EAAb,GACMD,EAASC,EAAf,GACM2N,EAAO3N,EAAb,IAGI4N,GACAzI,SADkBA,EAElBgC,YAFkBA,EAGlBd,eAHkBA,EAIlBD,cAJkBA,EAKlBW,WALkBA,EAMlBuG,WANkBA,EAOlB7F,WAPkBA,EAQlB8F,OARkBA,EASlBC,KATkBA,EAUlBpI,QAVkBA,EAWlBsI,gBAXkBA,EAYlBD,SAZkBA,EAalBxI,KAbkBA,EAclB4I,MAhBU7N,EAAd,IAiBI2N,KAfkBA,EAgBlB5N,YAOAC,EAAO,GAHPI,cACAU,aAIAgN,GACA1N,UADqBA,EAErBH,YALAA,UAMAa,YAOAiN,GACAhG,MALU/H,EAAd,IAMI2J,MALU3J,EAAd,IAMIiN,SALajN,EAAjB,KASMgO,EAAiBhO,EAAvB,IAKAiO,aACIC,OADUN,EAEVO,GAFUJ,EAGVK,SANAC,UAAWL,GAOXM,UAAWR,GAGf5Q,m0BCxEA,IAAM+H,EAAOjF,EAAb,GAEMsN,cACF,SAAAA,EAAAjI,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA4K,IACjBhI,EAAAC,EAAA7C,KAAA8C,EAAA8H,GAAA1P,KAAA8E,KAAA2C,KAEAkJ,aAAA5O,EAHiB2F,8OADAL,oFAOXuJ,GACN9L,KAAA6L,QAAAC,qCAIA,OAAO9L,KAAP6L,wCAGKE,iCAGHA,qCAGIA,aAKdvR,yzBC5BA,IAAMkI,EAAUpF,EAAhB,GACM+G,EAAa/G,EAAnB,GACMD,EAASC,EAAf,GACMoG,EAAgBpG,EAAtB,GAEMuN,cACF,SAAAA,EAAAlI,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA6K,IACjBjI,EAAAC,EAAA7C,KAAA8C,EAAA+H,GAAA3P,KAAA8E,KADiB2C,KAIjBkG,aAAA,MAEAlG,EAAUlH,OAAAmI,QACNkD,SADoB,KAEnB3D,SAFmB,EAGnB6I,aAHmB,IAAxBrJ,IAMAsJ,YACIrJ,EAAAsJ,cAAmBvJ,EAAnBsJ,YAGJrJ,EAAAuJ,UAAiBxJ,EAAjBmE,SACAlE,EAAAwJ,aAAoBzJ,EAApBqJ,aACApJ,EAAAyJ,UAAiB1J,EAAjBQ,SACAP,EAAA0J,gBAnBiB,SAwBjB1J,EAAA3E,UAAAhB,EACA2F,EAAAiJ,aAAA5O,EACA2F,EAAA2J,6BAEA3J,EAAA4J,WA5BiB,EAAA5J,8OADJF,gFAmCXwC,EAAMuH,EAAUC,GAClB1M,KAAAyI,gBAAAC,KACIxD,EADJC,YAAAsH,EAAAC,EAAA1M,sCAOK+L,iCAGHA,GACC/L,KAAHqC,aACIrC,KAAAkH,cAAA7D,WACInE,EAAIc,KAAAkH,cAAAyB,YAAAzJ,EAAmCc,KAAAqC,WAAkB5E,SAASuC,KADzCkE,gBAExB/E,EAAIa,KAAAkH,cAAAyB,YAAAxJ,EAAmCa,KAAAqC,WAAkB5E,SAASuC,KAATvC,kBAG3DuC,KAAHyI,iBACIzI,KAAAyI,gBAAAvB,cAAA7D,UAA6CrD,KAAAkH,cAA7CyB,+CAIFoD,gDASN,OAAO/L,KAAPsM,8DAIA,OAAO7Q,YAAYuE,KAAnBuM,sEAKgBI,GAChB,IAAIC,EAAoB5M,KAAA6M,mBAAxBF,GACAC,GACIA,4DAIWlD,GACf,IAAI5I,GAAJ,EAIA,OAHGd,KAAAuM,0BAAHI,SACI7L,EAASd,KAAAuM,0BAATzL,QAEJA,6CAKgB6L,GAGhB,OAAIA,aAAJ9B,GACW7K,KAAA8M,kBAAuBH,EAA9BI,oEAQJ,OAAO/M,KAAAuM,0BAAP3P,sDAMY8M,EAAOG,GACnB7J,KAAAuM,0BAAA7C,GAAAG,0CAGaH,UACN1J,KAAAuM,0BAAP7C,yCAQA,OAAO1J,KAAAkH,cAAPyB,gDAMSvF,EAAOjE,GACbiE,aAAHM,EACI1D,KAAAkH,cAAA7D,UAA6BD,EAA7BuF,aACE,WAAGpF,EAAAH,GACLpD,KAAAkH,cAAA7D,WAA8BnE,EAAEkE,EAAHlE,EAAYC,EAAEiE,EAAMjE,IAEjDa,KAAAkH,cAAA7D,WAA8BnE,EAADkE,EAAUjE,EAAEA,0CAWlCyJ,GACX,KAAMA,aAANvE,GACI,mDAEJrE,KAAA6I,aAAAD,0CAKA,OAAO5I,KAAP6I,oDAMA,OAAO7I,KAAAgN,cAAP9I,qDAEWH,GACX/D,KAAAgN,cAAAC,cAAAlJ,EAAsC/D,KAAtCoM,mDAEUrI,GAGV,OAFA/D,KAAAgN,cAAA5I,aAAAL,GAEO/D,KAAPkE,kDAIA,OAAOlE,KAAAgN,cAAP3K,4CAGMJ,GACNjC,KAAAgN,cAAAE,SAAAjL,uCAGS6E,GACT9G,KAAAmM,UAAArF,wCAMA,OAHK9G,KAALmM,YACInM,KAAAmM,UAAiB,IAAjB9O,GAEG2C,KAAPmM,+CAMA,OAAOnM,KAAPmN,gDAKA,OAAOnN,KAAA/B,MAAa+B,KAAbwM,aAAiCxM,KAAxC6I,gDAGQuE,GACRpN,KAAAwM,UAAAY,mCAGKtB,GACL9L,KAAA6L,QAAAC,qCAIA,OAAO9L,KAAP6L,iBAIRrR,yzBC5NA,IAAM+H,EAAOjF,EAAb,GAEMwN,cACF,SAAAA,IAAc,IAAAlI,EAAA,mGAAAJ,CAAAxC,KAAA8K,IACVlI,EAAAC,EAAA7C,KAAA8C,EAAAgI,GAAA5P,KAAA8E,QACA6L,aAAA5O,EAFU2F,8OADCL,mFAOX,OAAOvC,KAAAqN,WAAPC,uCAIA,OAAOtN,KAAAqN,WAAPE,wCAGKC,GACLxN,KAAA6L,QAAA2B,qCAIA,OAAOxN,KAAP6L,iBAIRrR,yzBCtBA,IAAM+H,EAAOjF,EAAb,GAGMyN,cACF,SAAAA,EAAApI,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA+K,GACjBnI,EAAAC,EAAA7C,KAAA8C,EAAAiI,GAAA7P,KAAA8E,KAAA2C,IACAA,EAAUlH,iBAAVkH,GACAC,EAAA3E,KAAY0E,EAAZ8K,GACA7K,EAAA8K,UAAiB/K,EAAjBgL,QAJiB/K,8OADFL,gFAQbqL,GACF,yCAEEtJ,EAAOpF,EAAEC,EAAEgE,EAASqH,EAAMmD,GAC5B,IAAInJ,EAAUF,aAAd,MACAE,cACAA,eAAyB,EAAI/G,KAA7B+G,OACAA,mBACAA,SACAA,cACAA,wBACAA,6CAGAxE,KAAA0N,UAAAG,eAAA7N,eAIRxF,yzBChCA,IAAMkD,EAAYJ,KAAlBI,UACMgF,EAAUpF,EAAhB,GAEM0N,cACF,SAAAA,EAAArI,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAgL,IACjBpI,EAAAC,EAAA7C,KAAA8C,EAAAkI,GAAA9P,KAAA8E,KADiB2C,KAIjBmL,eACAlL,EAAAmL,cAGAnL,EAAAoL,cARiB,EAWjBpL,EAAAqL,cAXiB,EAcjBrL,EAAA3E,KAAA,KAdiB2E,8OADKF,gFAoBpBwC,EAAMuH,EAAUC,GAAS,IAAApJ,EAAAtD,KAC3BA,KAAAkO,eAAAC,QAA4B,SAAAtR,GACxBA,OAAOqI,EAAPrI,kDAMF+Q,GACF5N,KAAAkO,eAAAC,QAA4B,SAAAtR,GACxBA,YAGJmD,KAAAoO,sDAGApO,KAAA8N,qDAEUO,GACVrO,KAAAgO,aAAAK,0CAGA,OAAOrO,KAAPgO,oDAOA,OAAOhO,KAAP8N,mDAEYQ,GACZtO,KAAA+N,WAAApE,KAAA2E,6CAGeA,GACf5Q,0BAAkCsC,KAAlCtC,YAAoDsC,KAApDtC,YACAsC,KAAA+N,mDAQSQ,EAAc5L,GACvB,IAAA6L,EASA,OAHAA,EAAc,IAAAD,EAJd5L,EAAUlH,OAAAmI,QACN6J,KAAOzN,KADaiO,cAEpBN,QAAU3N,MAFd2C,IAKA3C,KAAA8N,YAAAnE,KAAA6E,GAEAA,WAIRhU,yzBC7EA,IAAMkI,EAAUpF,EAAhB,GACMI,EAAYJ,KAAlBI,UAEMuN,cACF,SAAAA,EAAAtI,GAAqB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAiL,IACjBrI,EAAAC,EAAA7C,KAAA8C,EAAAmI,GAAA/P,KAAA8E,KAAA2C,KACA8L,SAAgB9L,EAAhB2B,OACA1B,EAAAiJ,aAAA5O,EAEA2F,EAAA8L,YAAmB/L,cAAnB,EAEAC,EAAA6L,SAAA/P,MAAsBkE,EAAAsE,cAAtBxI,MACAkE,EAAA6L,SAAA5P,OAAuB+D,EAAAsE,cAAvBrI,OACA+D,EAAA6L,SAAAE,MAAAjQ,MAA6BkE,EAAAsE,cAAAxI,MAA2BkE,EAA5B8L,YAA5B,KACA9L,EAAA6L,SAAAE,MAAA9P,OAA8B+D,EAAAsE,cAAArI,OAA4B+D,EAA7B8L,YAA7B,KAEA9L,EAAAgM,kBAAA,EAEAhM,EAAAiM,SACAjM,EAAAkM,iBACAlM,EAAAmM,QAhBiB,EAmBjBnM,EAAA3E,KAAA,KAnBiB2E,8OADNF,yFAuBX1C,KAAAyO,SAAAO,WAAA,MAAAC,UAAA,IAA6CjP,KAAAyO,SAA7C/P,MAAiEsB,KAAAyO,SAAjE5P,qCAEEqQ,GAAK,IAAA5L,EAAAtD,KAEJA,KAAH4O,kBACI5O,KAAAkH,cAAAiI,wBACInP,KAAA4O,iBAAA1H,cADJyB,YAEM3I,KAAA6L,QAFN3E,eAOJlH,KAVOoP,cAaPpP,KAAA6L,QAAAwD,gBAAA3G,KAbO1I,MAgBPA,KAAA6L,QAAAyD,eAAAnB,QAAoC,SAAAoB,GAE5BA,EAAJpC,aAQI7J,EAAAJ,SAAeqM,kBAAnBrI,gBAGIqI,SAEKA,8BAAmCjM,EAAA4D,cAAAvC,yBAFxC4K,SAGKA,8BAAmCjM,EAAA4D,cAAAvC,yBAHxC4K,YASRvP,KAAA6L,QAAA2D,sBAAArB,QAA2C,SAAAsB,GACnCnM,EAAAJ,SAAcuM,EAAlBvI,gBACIuI,SAEIA,8BAAmCnM,EAAA4D,cAAAvC,yBAFvC8K,SAGIA,8BAAmCnM,EAAA4D,cAAAvC,yBAHvC8K,YAURzP,KAlDO0P,cAqDP1P,KAAA2P,SAAAxB,QAAsB,SAAAyB,GAClBA,+CAOJ,OAAO5P,KAAPyO,4CAGA,OAAOzO,KAAP6L,yCAEMC,GACN9L,KAAA6L,QAAAC,0CAGA,OAAO9L,KAAP0O,6CAKMkB,GAKN,OAJGA,EAAH3R,MACI+B,KAAA8O,cAAAnF,KAAAiG,GAGJA,wCAGAlS,0BAAkCsC,KAAlCtC,MAA8CsC,KAA9CtC,eAEAsC,KAAA8O,+CAEEc,GACF,GAAGA,EAAH3R,KACI,wBAMJ,OAJA2R,SAAY5P,KAAZ4P,QAEA5P,KAAA6O,MAAAlF,KAAAiG,GAEAA,mCAIA,OAAO5P,KAAP6O,+CAIcvJ,GACd,OAAO,IAAIiG,eAAJlG,MAAAC,EAAPtF,6CAGY6P,GAER7P,KAAA4O,iBADJiB,IAGI,WAKZrV,yzBCrJA,IAAMkI,EAAUpF,EAAhB,GACMyH,EAAazH,EAAnB,GACMmH,EAAcnH,EAApB,GACMI,EAAYJ,KAAlBI,UAEMyN,cACF,SAAAA,EAAAxI,GAAsB,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAmL,GAClBxI,WAAmB,IAAA8B,GACfhG,SAD+B,EAE9BG,SAF8B,EAG9BF,MAAQiE,EAHsBjE,MAI9BG,OAAS8D,EAAQ9D,UAEtB+D,EAAAC,EAAA7C,KAAA8C,EAAAqI,GAAAjQ,KAAA8E,KAAA2C,KACAmN,KAAYnN,OAAZ,GAEAC,EAAAmN,eACAnN,EAAAoN,sBACApN,EAAAqN,iBACArN,EAAAsN,WAEAtN,EAAAuN,8BACAvN,EAAAwN,uBACAxN,EAAAyN,yBACAzN,EAAA0N,mBAEA1N,EAAA2N,qBACA3N,EAAA4N,aAAoB7N,cAAsB,IAA1CoC,EAEAnC,EAAA6N,cAAA,EACA7N,EAAA8N,UAAA,EACA9N,EAAA+N,aAAA,EACA/N,EAAAgO,gBAAA,EACAhO,EAAAiO,QAAA,EA3BkBjO,8OADNF,mFAgCR,IAAAY,EAAAtD,KACJA,KAAA8Q,aAAoBC,YAAY,WAC5B,IACIzN,EAAA0N,KAAA5T,MAAAkG,MACF,MAAA1C,GACE0C,EAAAiK,KAAA3M,KAEL,IAAOZ,KANV8P,wCASOZ,GAEPlP,KAAA+P,YAAA5B,QAAyB,SAAAoB,GACrBA,eAIJvP,KAAAiQ,cAAA9B,QAA2B,SAAA8C,GACvBA,kDAII/B,GAERlP,KAAA+P,YAAA5B,QAAyB,SAAAoB,GACrBA,gBAIJvP,KAAAiQ,cAAA9B,QAA2B,SAAA8C,GACvBA,gBAGJjR,KAAAkR,sBACAlR,KAAAmR,2BACAnR,KAAAoR,gBACApR,KAAAqR,mDAGG,IAAAC,EAAAtR,KACHA,KAAAuR,YAAiBvR,KADd6Q,SAIH7Q,KAAAiQ,cAAA9B,QAA2B,SAAA8C,GACvBA,OAAUK,EAAVL,WAIJjR,KAAAgQ,mBAAA7B,QAAgC,SAAAsB,GAC5BA,OAAU6B,EAAV7B,WAIJzP,KAAA+P,YAAA5B,QAAyB,SAAAoB,GACrBA,OAAU+B,EAAV/B,WAIJvP,KAAA+P,YAAA5B,QAAyB,SAAAqD,GACjBA,EAAJC,wBAC4BD,EAAxBE,sBACAC,QAA0B,SAAAjI,GAElB4H,EAAAf,kBAAA7G,IAAiC4H,EAAAf,kBAAA7G,GAArC1L,QAGIsT,EAAAf,kBAAA7G,GAAAyE,QAAuC,SAAAxB,GAG/B6E,SAAY7E,EAAZ6E,MAA0BA,WAAY7E,EAA1CzF,gBACIsK,8BASxBxR,KAAAkQ,QAAA/B,QAAqB,SAAAjJ,GACjBA,OAAUoM,EAAVpM,WAGJlF,KAAA4R,WAAgB5R,KAAhB6Q,wCAIAgB,cAAc7R,KADX8Q,qDASSjB,GAKZ,OAJGA,EAAH5R,MAEI+B,KAAAoQ,oBAAAzG,KAAAkG,GAEJA,8CAEiB,IAAAiC,EAAA9R,KACZA,KAAAoQ,oBAALpS,SAGAN,0BAAkCsC,KAAlCtC,YAAoDsC,KAApDtC,oBAA8E,SAAA6R,GAC1EuC,EAAAC,2BAAAxC,GACAA,mBAEJvP,KAAAoQ,4DAGSP,GACT,GAAGA,EAAH5R,KACI,8BASJ,OAPA4R,SAAkB7P,KAAlB6P,cACAA,WALkB7P,MAOlBA,KAAA+P,YAAApG,KAPkBkG,GASlB7P,KAAAgS,sBAAAnC,GAEAA,yCAIA,OAAO7P,KAAP+P,yDAGkB,IAAAkC,EAAAjS,KAClBA,KAAAsP,eAAAnB,QAA4B,SAAAoB,GACxB0C,EAAAC,eAAA3C,qCAOCrK,GACL,GAAIA,EAAJjH,KACI,0BAMJ,OAJAiH,SAAclF,KAAdkF,UACAA,iBACAlF,KAAAkQ,QAAAvG,KAAAzE,GAEAA,qCAIA,OAAOlF,KAAPkQ,gDAIKlQ,KAAAsQ,gBAALtS,SAGAN,0BAAkCsC,KAAlCtC,QAAgDsC,KAAhDtC,gBAAsE,SAAAyU,GAAQA,mBAE9EnS,KAAAsQ,uDAGQpL,GAKR,OAJGA,EAAHjH,MAEI+B,KAAAsQ,gBAAA3G,KAAAzE,GAEJA,6CAMgByI,GAChB,GAAIA,EAAJ1P,KACI,6BAIJ,OAFA0P,SAAiB3N,KAAjB2N,aACA3N,KAAAgQ,mBAAArG,KAAAgE,GACAA,gDAGmBA,GAKnB,OAJIA,EAAJ1P,MAEI+B,KAAAmQ,2BAAAxG,KAAAgE,GAEJA,qDAGK3N,KAAAmQ,2BAALnS,SAGAN,0BAAkCsC,KAAlCtC,mBAA2DsC,KAA3DtC,4BAEAsC,KAAAmQ,6EAGA,OAAOnQ,KAAPgQ,uEAGyB,IAAAoC,EAAApS,KACzBA,KAAAwP,sBAAArB,QAAmC,SAAAR,GAC/ByE,EAAAC,sBAAA1E,2CAOO2E,GACX,GAAIA,EAAJrU,KACI,6BAKJ,OAHAqU,SAAoBtS,KAApBsS,gBACAA,iBACAtS,KAAAiQ,cAAAtG,KAAA2I,GACAA,2CAGcA,GAKd,OAJIA,EAAJrU,MAEI+B,KAAAqQ,sBAAA1G,KAAA2I,GAEJA,gDAGKtS,KAAAqQ,sBAALrS,SAGAN,0BAAkCsC,KAAlCtC,cAAsDsC,KAAtDtC,sBAAkF,SAAAtC,GAAQA,mBAE1F4E,KAAAqQ,mEAGA,OAAOrQ,KAAPiQ,oDAMWsC,GACXvS,KAAAwQ,aAAA+B,0CAIA,OAAOvS,KAAPwQ,2DAKmBX,GACnB,IAAInG,EAAQmG,EAAZ9C,oBAEI/M,KAAAuQ,kBAAJ7G,KACI1J,KAAAuQ,kBAAA7G,OAEJ1J,KAAAuQ,kBAAA7G,GAAAC,KAAAkG,sDAEwBA,GACxB,IAAA9U,EACI2O,EAAQmG,EAAZ9C,oBAEA,IAAK/M,KAAAuQ,kBAAL7G,GACI,sCAGJ,IAAI3O,EAAJ,EAASA,EAAEiF,KAAAuQ,kBAAA7G,GAAX1L,OAAiDjD,IAC7C,GAAGiF,KAAAuQ,kBAAA7G,GAAA3O,GAAAkD,OAA0C4R,EAA7C5R,KAA2D,CACvD+B,KAAAuQ,kBAAA7G,GAAA8I,OAAAzX,EAAA,GACA,gBAMhBP,yzBCxTA,IAAMyM,EAAQ3J,EAAd,IACMqG,EAAiBrG,EAAvB,KAC8BA,EAAO,GAA9Bc,aAAUV,cACX4N,EAAiBhO,EAAvB,IAEMiN,cACF,SAAAA,EAAA5H,GAAqB,IAAAC,+FAAAJ,CAAAxC,KAAAuK,GAAA,OAEjB5H,iBACAA,WAAmB,IAAAgB,GACfzE,EAAIyD,EAD8BzD,EAEjCC,EAAIwD,EAF6BxD,EAGjCe,OALL,MAOA0C,EAAAC,EAAA7C,KAAA8C,EAAAyH,GAAArP,KAAA8E,KAAA2C,KACA8P,eARA,GAUA7P,EAAA8P,UAAA,EAEA9P,EAAA+P,YAbiB,IAgBjB/P,EAAAgQ,kBAAA,KAEAhQ,EAAAiG,aAAoB,IAApByC,EAEA1I,EAAAiQ,eAAA,KAEAjQ,EAAAkQ,OAAY,SAAAxN,GACR1C,EAAAiQ,eADiBvN,EAIjB1C,EAAAiQ,eAAAE,UAAAzN,GAEA1C,EAAAsE,cAAA1D,KACItD,OAAS,EAAI0C,EAAK6P,iBAGtB,mBAAU7P,EAAPgQ,oBACKtN,EAAJwB,UACIxB,uBAEJ1C,EAAAgQ,kBAAAtN,MAIR1C,EAAAoQ,KAAU,SAAA1N,GACN1C,EAAAsE,cAAA1D,KACItD,OAAS0C,EAAK6P,wBAEX7P,EAAPiQ,eAEA,mBAAUjQ,EAAPgQ,oBACKtN,EAAJwB,UACIxB,uBAEJ1C,EAAAgQ,kBAAAtN,MAIR1C,EAAAqQ,OAAY,SAAA3N,GACJ1C,EAAJsG,WACI5D,YAAc1C,EAAd0C,YACA,mBAAU1C,EAAPgQ,oBAEKtN,EAAJwB,UACIxB,oBAAsB7H,SAAS6H,WAAT7H,WAAkCmF,EAAA6P,eAAsB7P,EAA9E0C,cAEJ1C,EAAAgQ,kBAAAtN,IAEJ1C,EAAAiQ,eAAAvN,KAhES1C,8OADFqE,qFAqER4C,GACP7J,KAAA4S,kBAAA/I,8CAGO7J,KAAP4S,2DAGA,IAAIjQ,GACAuQ,MAAQlT,KAAAkH,cADEyB,YAETgC,UAAY3K,KAAAkJ,UAGjB,GAAGlJ,KAAA6S,gBAAuB7S,KAAA6S,eAA1B/L,SAAuD,CACnD,IAAI1E,EAAS1E,QAAgBsC,KAAA6S,eAA7B/L,UACA1E,WAAgB3E,SAASuC,KAAAyS,eAAsBzS,KAA/BvC,YAAiDuC,KAAA6S,eAAA/L,SAAjE1E,aACAO,QAAgBvE,kBAAyBuE,EAAzBvE,MAAhBuE,GAGJ,OAAAA,WAIRnI,u5BCpGA,IAAM2Y,EAAK7V,EAAQ,GAEb8V,cAMF,SAAAA,EAAYzQ,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAoT,IACjBxQ,EAAAC,EAAA7C,KAAA8C,EAAAsQ,GAAAlY,KAAA8E,KAAM2C,KAED0Q,YAAY1Q,EAAQzD,EAAGyD,EAAQxD,GACpCyD,EAAK0Q,aAAe3Q,EAAQ4Q,MAC5B3Q,EAAK4Q,aAAe7Q,EAAQ8Q,MAE5B7Q,EAAK8Q,SAgBb,SAAgCC,EAAUC,GACtC,IAAIC,EAAQD,EAAe,IAC3B,OACIxY,EAAGwY,EAAenW,KAAKqW,MAAMH,EAAS,GAAKE,GAC3C1Y,EAAGyY,EAAenW,KAAKqW,MAAMH,EAAS,GAAKE,GAC3C1U,EAAGyU,EAAenW,KAAKqW,MAAMH,EAAS,GAAKE,IArB3BE,CAAuBnR,EAAK0Q,aAAc1Q,EAAKoR,YAAYC,kBAP1DrR,8OANLuQ,EAAG3H,OAAOX,yDACM,OAAO,kCAChB,MAAO,uCACJ,MAAO,sCACR,MAAO,yCAY1B7F,GACF,OAAKA,EAGMhF,KAAK0T,SAAS1O,GAFdhF,KAAK0T,iDAOhB,MAAO,OAAS1T,KAAKsT,aAAa,GAAK,IAAMtT,KAAKsT,aAAa,GAAK,IAAMtT,KAAKsT,aAAa,GAAK,aAazG9Y,EAAOD,QAAU6Y,0zBCxCjB,IAMI9O,EANE6O,EAAK7V,EAAQ,GACb4W,EAAe5W,EAAQ,GACvB6W,EAAkB7W,EAAQ,GAC1B8W,EAAS9W,EAAQ,IACjB+W,EAAe/W,EAAQ,IAQvBgX,EAAe,IACfC,EAAgB,KAEhBC,sZAAmBrB,EAAG3H,OAAOV,mFAC1BnQ,GACD2J,EAAS3J,EAAO8Z,SAASC,eAAe,SACxC1U,KAAK2U,aAAe,IAAIT,EAGxBvZ,EAAOia,OAAQ,EAEf5U,KAAK6U,MAfM,sCAkBTC,GAGF,OAFA9U,KAAK+U,eAEGD,GACJ,IAtBO,OAuBH9U,KAAKgV,YACL,MACJ,IAvBO,OAwBHhV,KAAKiV,YACL,MACJ,IA3BQ,QA4BJjV,KAAKkV,aAIblV,KAAKmV,qDAIDnV,KAAKqN,aACLrN,KAAKqN,WAAWE,OAChBvN,KAAKoV,SAAS,6CAKlBpV,KAAKqN,WAAWC,4CAIhB,IAAI+H,EAAiB,IAAIlC,EAAG3H,OAAOzG,YAC/BC,MAAO,YAGP8G,EAAQ,IAAIqH,EAAG3H,OAAOL,OACtBmK,IAAK,GACL5W,MAAO4V,EACPzV,OAAQ0V,EACRhC,WAAY8C,IAGZE,EAAaC,IACbtQ,EAAO,IAAIiO,EAAG3H,OAAOP,MACrB3G,OAAQA,EACRmR,WAAYF,EAAW/K,MACvBxH,SAAU8I,EAAM5E,gBAGpB4E,EAAM4J,QAAQxQ,GAGdlF,KAAK2V,OAAS,IAAIvB,MAClBtI,EAAM8J,YAAY5V,KAAK2V,QAGvB3V,KAAK6V,gBAAkB,IAAI1B,GAAiBrI,MAAOA,IACnDA,EAAMgK,cAAc9V,KAAK6V,iBAKN,IAAIxB,GACnBnP,KAAMA,EACNyQ,OAAQ3V,KAAK2V,SAGjB3V,KAAKoV,SAAStJ,uCAId,IAAIiK,EAAiB,IAAI5C,EAAG3H,OAAOzG,YAC/BC,MAAO,YAGP8G,EAAQ,IAAIqH,EAAG3H,OAAOL,OACtBmK,IAAK,GACL5W,MAAO4V,EACPzV,OAAQ0V,EACRhC,WAAYwD,IAGZR,EAAaC,IACbtQ,EAAO,IAAIiO,EAAG3H,OAAOP,MACrB3G,OAAQA,EACRmR,WAAYF,EAAW/K,MACvBxH,SAAU8I,EAAM5E,gBAGpB4E,EAAM4J,QAAQxQ,GAIdlF,KAAKoV,SAAStJ,wCAIdkK,MAAM,oBAId,SAASR,IAEL,GAAMlB,EAAeC,EAAkB5Z,OAAOsb,WAAatb,OAAOub,YAAe,CAC7E,IAAI1L,EAAS7P,OAAOsb,WAAa3B,EACjC,OACI5V,MAAO/D,OAAOsb,WACdpX,OAAQ2L,EAAQ+J,EAChB/J,MAAOA,GAIX,IAAIA,EAAS7P,OAAOub,YAAc3B,EAClC,OACI1V,OAAQlE,OAAOub,YACfxX,MAAO8L,EAAQ8J,EACf9J,MAAOA,GAKnB7P,OAAO6Z,WAAaA,iBClJpBha,EAAAD,QAAA,SAAAC,GAoBA,OAnBAA,EAAA2b,kBACA3b,EAAA4b,UAAA,aACA5b,EAAA6b,SAEA7b,EAAA8b,WAAA9b,EAAA8b,aACA7a,OAAAC,eAAAlB,EAAA,UACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAO,KAGAP,EAAA2b,gBAAA,GAEA3b,kBCZAA,EAAOD,QAPH,SAAA2Z,iGAAc1R,CAAAxC,KAAAkU,GACVlU,KAAKuW,OAAS,IACdvW,KAAKwW,UAAY,IACjBxW,KAAKyW,QAAU,kmCCJvB,IAAMtD,EAAK7V,EAAQ,GACboZ,EAAkBpZ,EAAQ,GAC1BqZ,EAAQrZ,EAAQ,IAIhB6W,cACF,SAAAA,EAAYxR,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAmU,IACjBvR,EAAAC,EAAA7C,KAAA8C,EAAAqR,GAAAjZ,KAAA8E,KAAM2C,KAEDiU,aAAejU,EAAQiU,eAAiB,EAC7ChU,EAAKiU,eAAgB,EACrBjU,EAAKkU,gBAAiB,EACtBlU,EAAKmU,gBAAkB,KANNnU,8OADKuQ,EAAG3H,OAAOZ,4FAU5BmB,GACJiL,EAAAlU,EAAAqR,EAAAxX,WAAA,UAAAqD,MAAA9E,KAAA8E,KAAc+L,GAET/L,KAAK6W,eAAkB7W,KAAK8W,gBAC7B9W,KAAKiX,4CAIRlL,GACDiL,EAAAlU,EAAAqR,EAAAxX,WAAA,OAAAqD,MAAA9E,KAAA8E,KAAW+L,4CAIXmL,QAAQC,IAAI,aAEZnX,KAAK+W,gBAAgBxJ,cACdvN,KAAK+W,uBACL/W,KAAKoX,MACZpX,KAAK6W,eAAgB,yCAGV,IAAAvT,EAAAtD,KAGX,OAFAA,KAAK4W,eAEG5W,KAAK4W,cACT,KAAK,EAEL,QACI,IAAIS,EAAYC,EAAOtX,KAAK4W,cAExBW,EAAU,IAAIC,MAGlBD,EAAQE,YAAc,YACtBF,EAAQG,OAAS,WACbpU,EAAKwT,gBAAiB,EACtBO,EAAUM,MAAQJ,EAClBjU,EAAK8T,MAAQ,IAAIT,EAAMU,GACvB/T,EAAKyT,gBAAkB,IAAIL,GACvBU,MAAO9T,EAAK8T,MACZQ,WAAYtU,EAAKuU,iBAErBvU,EAAK+J,WAAWyI,cAAcxS,EAAKyT,iBACnCzT,EAAKuT,eAAgB,GAEzBU,EAAQO,IAzDK,4BAyDwBT,EAAUU,UAIvD/X,KAAK8W,gBAAiB,WAIxBQ,IAEEhc,KAAM,eACN0c,WAAY,EACZD,UAAW,YAInBvd,EAAOD,QAAU4Z,imCC7EjB,IAAMhB,EAAK7V,EAAQ,GACb2a,EAAa3a,EAAQ,GAErB4a,EAA8B,GAM9BxB,cACF,SAAAA,EAAY/T,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA0W,IACjB9T,EAAAC,EAAA7C,KAAA8C,EAAA4T,GAAAxb,KAAA8E,KAAM2C,KAEDwV,cAAgBxV,EAAQyU,MAE7BxU,EAAKwV,kBAGLxV,EAAKyV,0BAAuBpb,EAC5B2F,EAAK0V,UAAYJ,EAEjBtV,EAAKgV,WAAajV,EAAQiV,WAXThV,8OADKuQ,EAAG3H,OAAOZ,yFAe/BmB,GAED,GADAiL,EAAAlU,EAAA4T,EAAA/Z,WAAA,OAAAqD,MAAA9E,KAAA8E,KAAW+L,GACP/L,KAAKqY,qBAAuB,EAC5BrY,KAAKqY,4BAIT,GAAmD,IAA/C5a,KAAK8a,MAAM9a,KAAK+a,SAAWxY,KAAKsY,WAAkB,CAKlD,IAHA,IAAIG,EAAiB,EAAIhb,KAAKqW,OAAQ,EAAK9T,KAAK0Y,WAAW1a,OAASgC,KAAK2Y,mBAAsB3Y,KAAKmY,cAAcS,iBAG3GH,EAAiB,GACpBzY,KAAK6Y,iCAAiC7Y,KAAK0Y,WAAWI,OACtDL,IAGJzY,KAAKqY,qBAAuBH,EAA8BO,oCAIzD1M,GACLiL,EAAAlU,EAAA4T,EAAA/Z,WAAA,WAAAqD,MAAA9E,KAAA8E,KAAe+L,6CAGD,IAAAzI,EAAAtD,KACdA,KAAK0Y,cACL,IAAIK,KACAC,EAAYhZ,KAAKmY,cAAcc,eACnCjZ,KAAK2Y,kBAAoBK,EAAUhb,OACnC,IAAIkb,EAA0BlZ,KAAK2Y,kBAAoB3Y,KAAKmY,cAAcS,gBAE1EI,EAAU7K,QAAQ,SAACoF,EAAOxY,GACtB,IAAIoe,EAAW5F,EAAM6F,KAAK,KACrBL,EAAOI,KACRJ,EAAOI,GAAY,GAKvBJ,EAAOI,KAEP,IAAIE,GACA9F,MAAOA,EACPE,MAAO1Y,GAGPge,EAAOI,GAAYD,EAEnBG,EAAMrS,KApEG,QAqEF+R,EAAOI,GAAa,EAAID,EAG/BG,EAAMrS,KAvEM,YA2EZ+R,EAAOI,IAAa,GACpBE,EAAMrS,KA3EE,QA8EZ1D,EAAKoV,WAAW/O,KAAK0P,KAKzBrZ,KAAK0Y,WAAWY,mEAIaC,GAC7B,IAAIC,EAEAC,EAAazZ,KAAKqN,WAAWnG,cAAcxI,MAI/C,OAHA6a,EAAUra,EAAI,GAAMua,EAAahc,KAAK+a,SAAY,GAAMiB,EACxDF,EAAUpa,GAAK,IAEPoa,EAAUvS,MACd,IAjGa,QAkGTwS,EAAgB,IAAIvB,EAAWsB,GAIvC,IAAKC,EACD,KAAM,qBAGVxZ,KAAKqN,WAAWuI,YAAY4D,kCAI5BxZ,KAAKqN,WAAWqM,oBAChB1Z,KAAKqN,WAAWsM,4BAChBzC,QAAQC,IAAI,oCAUpB3c,EAAOD,QAAUmc,0pCC/HjB,IAAMkD,EAActc,EAAQ,GACtB6V,EAAK7V,EAAQ,GACb8V,EAAQ9V,EAAQ,GAKhBuc,cAIF,SAAAA,EAAYlX,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAA6Z,GACjBlX,EAAQK,SAAW,IAAImQ,EAAG3H,OAAO/G,aAC7B/F,MAAOmb,EAAMC,KACbjb,OAAQgb,EAAMC,OAGlBnX,EAAQsJ,WAAa,IAAI2N,GACrB5W,SAAUL,EAAQK,YAEtBJ,EAAAC,EAAA7C,KAAA8C,EAAA+W,GAAA3e,KAAA8E,KAAM2C,KAGDyB,aAAa3G,KAAKsE,GAAK,GAC5Ba,EAAKmX,YAAc,EACnBnX,EAAKsK,SAAS,GAdGtK,8OAJLwQ,oDACgB,OAAO,+BACnB,OAAO,6CAuBvB,GAFA4D,EAAAlU,EAAA+W,EAAAld,WAAA,WAAAqD,MAAA5C,MAAA4C,KAAkBga,WAEdha,KAAKqC,aAAerC,KAAK+Z,YAAa,CACtC/Z,KAAK+Z,YAActc,KAAKqW,MA7BlB,EA6BoCrW,KAAK+a,UAC/C,IAAIyB,EAAexc,KAAKsE,GAAK,EAC7B/B,KAAKka,gBAAmBzc,KAAK+a,SAAW/a,KAAKsE,GAAK,EAAMtE,KAAKsE,GAAK,EAE9D/B,KAAKma,cAAcjb,EAhCf,KAgCkCc,KAAKka,gBAAkBD,EAC7Dja,KAAKka,gBAAkBD,EAChBja,KAAKma,cAAcjb,EAAKc,KAAKqN,WAAWnG,cAAcxI,MAlCzD,KAkCiFsB,KAAKka,gBAAkBD,IAC5Gja,KAAKka,gBAAkBD,OAExB,CACH,IAAIG,EAAapa,KAAK+Z,YAAc/Z,KAAKqC,WACrCgY,EAAaD,EAAa,EAE9Bpa,KAAKkN,SAASlN,KAAKqC,YAAegY,GAAc,EAAI,GAAK5c,KAAK6c,IAD9C,IAC6D7c,KAAK8c,IAAIH,KAGtFC,GADAD,EAAapa,KAAKka,gBAAkBla,KAAKkE,gBACf,EAC1BlE,KAAKoE,aAAapE,KAAKkE,gBAAmBmW,GAAc,EAAI,GAAK5c,KAAK6c,IALtD,IAKqE7c,KAAK8c,IAAIH,eAK1G5f,EAAOD,QAAUsf,0zBCvDjB,IAAMW,EAAcld,EAAQ,GAEtBuc,sZAAcW,sFACLlW,EAAQpF,EAAGC,EAAGoF,GAAQ,IAAAkW,EAOzBza,KAAK0a,gBAALtd,MAAA4C,KAAwBga,WALxBxV,EAFyBiW,EAEzBjW,QACAmW,EAHyBF,EAGzBE,SACAC,EAJyBH,EAIzBG,UACAC,EALyBJ,EAKzBI,UACAC,EANyBL,EAMzBK,aAGJ9a,KAAK+a,qBAAqBvW,EAASoW,EAAWC,EAAWF,EAAUA,EAAUpW,EAAOyW,gBAAiBF,uCAE7FxW,EAAQpF,EAAGC,EAAGoF,uCAGfD,EAAQpF,EAAGC,EAAGoF,GAAQ,IAAA0W,EAOzBjb,KAAK0a,gBAALtd,MAAA4C,KAAwBga,WALxBxV,EAFyByW,EAEzBzW,QACAmW,EAHyBM,EAGzBN,SACAC,EAJyBK,EAIzBL,UACAC,EALyBI,EAKzBJ,UACAC,EANyBG,EAMzBH,aAGEI,EAAWP,EAAS,EAO1B,GAJA3a,KAAK+a,qBAAqBvW,EAASoW,EAAWC,EAAWF,EAAUA,EAAU,UAAWG,GAIpFvW,EAAO4W,MAAM5W,EAAOyP,YAAYoH,SAAW,EAAG,CAC9C,IAAIC,GAAeP,EAAc,EAAG,EAAGA,GACnCQ,EAAqB,EAErB/W,EAAO4W,MAAM5W,EAAOyP,YAAYoH,WAAa7W,EAAOyP,YAAYC,mBAChEoH,EAAY,GAAK,EACjBC,EAAqBX,GAAa,EAAKpW,EAAO4W,MAAM5W,EAAOyP,YAAYoH,SAAW7W,EAAOyP,YAAYC,mBAEzGjU,KAAK+a,qBAAqBvW,EAASoW,EAAWC,EAAYS,EAAoBJ,EAAUP,EAAWW,EAAoBd,EAAYe,WAAYF,GAGnJ,GAAI9W,EAAO4W,MAAM5W,EAAOyP,YAAYwH,YAAc,EAAG,CACjD,IAAIC,EAAwB,EAExBlX,EAAO4W,MAAM5W,EAAOyP,YAAYwH,cAAgBjX,EAAOyP,YAAYC,mBACnEwH,EAAwBd,GAAY,EAAKpW,EAAO4W,MAAM5W,EAAOyP,YAAYwH,YAAcjX,EAAOyP,YAAYC,mBAI9GzP,EAAQkX,UAAYlB,EAAYmB,cAChCnX,EAAQsB,KAAK8U,EAAYM,EAAUL,EAAYY,EAAuBP,EAAUP,EAAWc,GAC3FjX,EAAQoX,OAGZ,GAAIrX,EAAO4W,MAAM5W,EAAOyP,YAAY6H,WAAa,EAAG,CAChD,IAAIC,GAAiB,EAAGhB,EAAcA,EAAc,GAChDiB,EAAuB,EAEvBxX,EAAO4W,MAAM5W,EAAOyP,YAAY6H,aAAetX,EAAOyP,YAAYC,mBAClE6H,EAAc,GAAK,EACnBC,EAAuBpB,GAAa,EAAKpW,EAAO4W,MAAM5W,EAAOyP,YAAY6H,WAAatX,EAAOyP,YAAYC,mBAE7GjU,KAAK+a,qBAAqBvW,EAASoW,EAAa,EAAIM,EAAWL,EAAYkB,EAAsBb,EAAUP,EAAWoB,EAAsBvB,EAAYwB,aAAcF,sCAGpKxX,EAAQpF,EAAGC,EAAGoF,iDAIHC,EAASoW,EAAWC,EAAWnc,EAAOG,EAAQmG,EAAO9E,GAEhD,iBAAXA,IACPA,GAAUA,EAAQA,EAAQA,EAAQA,IAQtCsE,EAAQyX,YACRzX,EAAQkX,UAAY1W,EACpBR,EAAQ0X,OAAOtB,EAAY1a,EAAO,GAAI2a,GACtCrW,EAAQ2X,OAAOvB,EAAYlc,EAAQwB,EAAO,GAAI2a,GAC9CrW,EAAQ4X,iBAAiBxB,EAAYlc,EAAOmc,EAAWD,EAAYlc,EAAOmc,EAAY3a,EAAO,IAC7FsE,EAAQ2X,OAAOvB,EAAYlc,EAAOmc,EAAYhc,EAASqB,EAAO,IAC9DsE,EAAQ4X,iBAAiBxB,EAAYlc,EAAOmc,EAAYhc,EAAQ+b,EAAYlc,EAAQwB,EAAO,GAAI2a,EAAYhc,GAC3G2F,EAAQ2X,OAAOvB,EAAY1a,EAAO,GAAI2a,EAAYhc,GAClD2F,EAAQ4X,iBAAiBxB,EAAWC,EAAYhc,EAAQ+b,EAAWC,EAAYhc,EAASqB,EAAO,IAC/FsE,EAAQ2X,OAAOvB,EAAWC,EAAY3a,EAAO,IAC7CsE,EAAQ4X,iBAAiBxB,EAAWC,EAAWD,EAAY1a,EAAO,GAAI2a,GACtErW,EAAQ6X,YACR7X,EAAQoX,+CAGItX,EAAQpF,EAAGC,EAAGoF,GAC1B,IAAMoW,EAAW3a,KAAKkH,cAAcxI,MAC9B4d,EAAY3B,EAAS,EAC3B,OACInW,QAASF,EAAO0K,WAAW,MAC3B2L,SAAUA,EAEVC,UAAY1b,EAAIod,EAChBzB,UAAY1b,EAAImd,EAChBxB,aAAc,YAK1BtgB,EAAOD,QAAUsf,m3BChHjB,IAAM1G,EAAK7V,EAAQ,GACbif,EAAcjf,EAAQ,OAiBtB8V,cAKF,SAAAA,EAAYzQ,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAoT,IACjBxQ,EAAAC,EAAA7C,KAAA8C,EAAAsQ,GAAAlY,KAAA8E,KAAM2C,KAED6Z,oBAAiBvf,EACtB2F,EAAK6Z,sBAAmBxf,EACxB2F,EAAK8Z,WAAY,EALA9Z,8OALLuQ,EAAG3H,OAAOnH,uDACA,MAAO,gDACJ,MAAO,+CACR,MAAO,8CAU7BC,EAAQpF,EAAGC,EAAGoF,GAChB,GAAqC,mBAA1BvE,KAAKyc,iBACZ,OAAOzc,KAAKyc,iBAALrf,MAAA4C,KAAyBga,WAGpC,IAAI2C,EAAgBpY,EAAO4W,SAjCnC,SAA0ByB,EAASC,GAC/B,SAAKA,IAAYD,GAGRA,EAAQL,EAAYnB,WAAayB,EAAQN,EAAYnB,UACvDwB,EAAQL,EAAYf,cAAgBqB,EAAQN,EAAYf,aACxDoB,EAAQL,EAAYV,aAAegB,EAAQN,EAAYV,YA4BtDiB,CAAiBH,EAAe3c,KAAKwc,gBAE9Bxc,KAAK0c,UACZ1c,KAAK+c,WAAL3f,MAAA4C,KAAmBga,YA5B/B,SAA4BzD,GACxB,QAAyC,IAAhCA,EAAOgG,EAAYnB,UACc,IAAnC7E,EAAOgG,EAAYf,aACe,IAAlCjF,EAAOgG,EAAYV,YA0BVmB,CAAmBL,GAC3B3c,KAAKid,YAELjd,KAAKkd,WAAL9f,MAAA4C,KAAmBga,WANnBha,KAAKmd,YAAL/f,MAAA4C,KAAoBga,WASxBha,KAAKwc,eAAiBG,qCAGfrY,EAAQpF,EAAGC,EAAGoF,wCACbD,EAAQpF,EAAGC,EAAGoF,uCACfD,EAAQpF,EAAGC,EAAGoF,sCACfD,EAAQpF,EAAGC,EAAGoF,aAG5B/J,EAAOD,QAAU6Y,yLCxDjB,IAAMgK,EAAO9f,EAAQ,IAEfqZ,aACF,SAAAA,EAAY0G,gGAAM7a,CAAAxC,KAAA2W,GACd3W,KAAK1E,KAAO+hB,EAAK/hB,KACjB0E,KAAKsd,UAAYD,EAAK1F,MACtB3X,KAAKgY,WAAaqF,EAAKrF,YAAc,EACrChY,KAAKgZ,UAAYrC,EAAM4G,mBAAmBvd,KAAKsd,UAAWtd,KAAKgY,0GAI/D,OAAOhY,KAAKgZ,kDAIZ,OAAOhZ,KAAKgY,wDAGUT,EAASiG,GAC/B,IAAIlZ,EAAS3J,OAAO8Z,SAASgJ,cAAc,UAC3CnZ,EAAO5F,MAAQ6Y,EAAQ7Y,MACvB4F,EAAOzF,OAAS0Y,EAAQ1Y,OAExByF,EAAO0K,WAAW,MAAM0O,UAAUnG,EAAS,EAAG,EAAGA,EAAQ7Y,MAAO6Y,EAAQ1Y,QAOxE,IANA,IAAI8e,EAAYrZ,EAAO0K,WAAW,MAAMiK,aAAa,EAAG,EAAG3U,EAAO5F,MAAO4F,EAAOzF,QAAQwe,KAKpFO,KACK7iB,EAAE,EAAGA,EAAE4iB,EAAU3f,OAAQjD,GAAG,EACjC6iB,EAAcjU,MACVgU,EAAU5iB,GAAI4iB,EAAU5iB,EAAE,GAAI4iB,EAAU5iB,EAAE,KAKlD,IAAI8iB,EAAOT,EAAKU,SAASF,EAAeJ,GAGxC,OAAOI,EAAcG,IAAI,SAASlhB,GAC9B,OAAOghB,EAAKE,IAAIlhB,cAK5BrC,EAAOD,QAAUoc,iBC1BjB,IAAMqH,GACFD,IAAK,SAAShU,EAAO/I,GACnB,IAAIxF,KACJ,OAAOwF,EAAI+I,EAAMgU,IAAI,SAAS1iB,EAAGN,GAAkB,OAAbS,EAAEiY,MAAQ1Y,EAAUiG,EAAE9F,KAAKM,EAAGH,KAAS0O,EAAMkU,SAErFC,aAAc,SAASxd,EAAGD,GACtB,OAAQC,EAAID,GAAM,EAAMC,EAAID,EAAK,EAAI,GAEzC0d,IAAK,SAASpU,EAAO/I,GACnB,IAAIxF,KACJ,OAAOuO,EAAMqU,OAAOpd,EAAI,SAASnE,EAAGxB,EAAGN,GAAkB,OAAbS,EAAEiY,MAAQ1Y,EAAU8B,EAAImE,EAAE9F,KAAKM,EAAGH,IAAQ,SAASwB,EAAGxB,GAAK,OAAOwB,EAAIxB,GAAM,IAE1HgjB,IAAK,SAAStU,EAAO/I,GACnB,OAAOvD,KAAK4gB,IAAIjhB,MAAM,KAAM4D,EAAIgd,EAAGD,IAAIhU,EAAO/I,GAAK+I,KAInDqT,EAAQ,WAEV,IAAIkB,EAAU,EACVC,EAAS,EAAID,EACbE,EAAgB,IAChBC,EAAqB,IAGzB,SAASC,EAAc7iB,EAAGoF,EAAGR,GACzB,OAAQ5E,GAAM,EAAIyiB,IAAard,GAAKqd,GAAW7d,EAInD,SAASke,EAAOC,GACZ,IAAIC,KACAC,GAAS,EAEb,SAASC,IACLF,EAASE,KAAKH,GACdE,GAAS,EAGb,OACInV,KAAM,SAASnO,GACXqjB,EAASlV,KAAKnO,GACdsjB,GAAS,GAEbE,KAAM,SAASvL,GAGX,OAFKqL,GAAQC,SACD9hB,IAARwW,IAAmBA,EAAQoL,EAAS7gB,OAAS,GAC1C6gB,EAASpL,IAEpBqF,IAAK,WAED,OADKgG,GAAQC,IACNF,EAAS/F,OAEpBgB,KAAM,WACF,OAAO+E,EAAS7gB,QAEpB+f,IAAK,SAAS/c,GACV,OAAO6d,EAASd,IAAI/c,IAExBie,MAAO,WAEH,OADKH,GAAQC,IACNF,IAMnB,SAASK,EAAKC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GACvBzf,KACNmf,GAAKA,EADCnf,KAENof,GAAKA,EAFCpf,KAGNqf,GAAKA,EAHCrf,KAINsf,GAAKA,EAJCtf,KAKNuf,GAAKA,EALCvf,KAMNwf,GAAKA,EANCxf,KAONyf,MAAQA,EAiFjB,SAASC,IACL1f,KAAK2f,OAAS,IAAIhB,EAAO,SAASje,EAAED,GAChC,OAAOud,EAAGE,aACNxd,EAAEkf,KAAKC,QAAQnf,EAAEkf,KAAKE,SACtBrf,EAAEmf,KAAKC,QAAQpf,EAAEmf,KAAKE,YAgGlC,SAASC,EAAeN,EAAOG,GAC3B,GAAKA,EAAKC,QAAV,CAEA,IAAIG,EAAKJ,EAAKR,GAAKQ,EAAKT,GAAK,EACzBc,EAAKL,EAAKN,GAAKM,EAAKP,GAAK,EACzBa,EAAKN,EAAKJ,GAAKI,EAAKL,GAAK,EACzBY,EAAOnC,EAAGK,KAAK2B,EAAIC,EAAIC,IAE3B,GAAoB,GAAhBN,EAAKC,QACL,OAAQD,EAAKQ,QAGjB,IAGIrlB,EAAGgD,EAAGsiB,EAAGlC,EAHTmC,EAAQ,EACRC,KACAC,KAEJ,GAAIL,GAAQH,EACR,IAAKjlB,EAAI6kB,EAAKT,GAAIpkB,GAAK6kB,EAAKR,GAAIrkB,IAAK,CAEjC,IADAojB,EAAM,EACDpgB,EAAI6hB,EAAKP,GAAIthB,GAAK6hB,EAAKN,GAAIvhB,IAC5B,IAAKsiB,EAAIT,EAAKL,GAAIc,GAAKT,EAAKJ,GAAIa,IAE5BlC,GAAQsB,EADAf,EAAc3jB,EAAEgD,EAAEsiB,KACF,EAGhCC,GAASnC,EACToC,EAAWxlB,GAAKulB,OAGnB,GAAIH,GAAQF,EACb,IAAKllB,EAAI6kB,EAAKP,GAAItkB,GAAK6kB,EAAKN,GAAIvkB,IAAK,CAEjC,IADAojB,EAAM,EACDpgB,EAAI6hB,EAAKT,GAAIphB,GAAK6hB,EAAKR,GAAIrhB,IAC5B,IAAKsiB,EAAIT,EAAKL,GAAIc,GAAKT,EAAKJ,GAAIa,IAE5BlC,GAAQsB,EADAf,EAAc3gB,EAAEhD,EAAEslB,KACF,EAGhCC,GAASnC,EACToC,EAAWxlB,GAAKulB,OAIpB,IAAKvlB,EAAI6kB,EAAKL,GAAIxkB,GAAK6kB,EAAKJ,GAAIzkB,IAAK,CAEjC,IADAojB,EAAM,EACDpgB,EAAI6hB,EAAKT,GAAIphB,GAAK6hB,EAAKR,GAAIrhB,IAC5B,IAAKsiB,EAAIT,EAAKP,GAAIgB,GAAKT,EAAKN,GAAIe,IAE5BlC,GAAQsB,EADAf,EAAc3gB,EAAEsiB,EAAEtlB,KACF,EAGhCulB,GAASnC,EACToC,EAAWxlB,GAAKulB,EAiCxB,OA9BAC,EAAWpS,QAAQ,SAAS9S,EAAEN,GAC1BylB,EAAazlB,GAAKulB,EAAMjlB,IA6BRolB,EAAbN,GAAQH,EAAW,IACtBG,GAAQF,EAAW,IACb,KA7BV,SAASQ,EAAMzb,GACX,IAEIiB,EAAMya,EAAOC,EAAOC,EAAOC,EAF3BC,EAAO9b,EAAQ,IACf+b,EAAO/b,EAAQ,IACgBgc,EAAO,EAC1C,IAAKjmB,EAAI6kB,EAAKkB,GAAO/lB,GAAK6kB,EAAKmB,GAAOhmB,IAClC,GAAIwlB,EAAWxlB,GAAKulB,EAAQ,EAAG,CAS3B,IARAK,EAAQf,EAAKQ,OACbQ,EAAQhB,EAAKQ,OAITS,GAHJ5a,EAAOlL,EAAI6kB,EAAKkB,MAChBJ,EAAQd,EAAKmB,GAAQhmB,GAEZ0C,KAAK6c,IAAIsF,EAAKmB,GAAQ,KAAMhmB,EAAI2lB,EAAQ,IACvCjjB,KAAK4gB,IAAIuB,EAAKkB,MAAU/lB,EAAI,EAAIkL,EAAO,KAEzCsa,EAAWM,IAAKA,IAExB,IADAG,EAASR,EAAaK,IACdG,GAAUT,EAAWM,EAAG,IAAIG,EAASR,IAAeK,GAK5D,OAHAF,EAAMI,GAAQF,EACdD,EAAME,GAAQH,EAAMI,GAAQ,GAEpBJ,EAAOC,KA4F/B,OA9VA1B,EAAKviB,WACDmjB,OAAQ,SAASmB,GAKb,OAJWjhB,KACDkhB,UAAWD,IADVjhB,KAEFkhB,SAFElhB,KAEeof,GAFfpf,KAEyBmf,GAAK,IAF9Bnf,KAEyCsf,GAFzCtf,KAEmDqf,GAAK,IAFxDrf,KAEmEwf,GAFnExf,KAE6Euf,GAAK,IAFlFvf,KAICkhB,SAEhBrB,MAAO,SAASoB,GACZ,IACIxB,EADOzf,KACMyf,MACjB,IAFWzf,KAEDmhB,YAAcF,EAAO,CAC3B,IACWlmB,EAAGgD,EAAGsiB,EADbe,EAAO,EAEX,IAAKrmB,EALEiF,KAKOmf,GAAIpkB,GALXiF,KAKqBof,GAAIrkB,IAC5B,IAAKgD,EANFiC,KAMWqf,GAAIthB,GANfiC,KAMyBsf,GAAIvhB,IAC5B,IAAKsiB,EAPNrgB,KAOeuf,GAAIc,GAPnBrgB,KAO6Bwf,GAAIa,IAE3Be,GAAS3B,EADDf,EAAc3jB,EAAEgD,EAAEsiB,KACD,EAT/BrgB,KAaFqhB,OAASD,EAbPphB,KAcFmhB,YAAa,EAEtB,OAhBWnhB,KAgBCqhB,QAEhBjB,KAAM,WAEF,OAAO,IAAIlB,EADAlf,KACUmf,GADVnf,KACmBof,GADnBpf,KAC4Bqf,GAD5Brf,KACqCsf,GADrCtf,KAC8Cuf,GAD9Cvf,KACuDwf,GADvDxf,KACgEyf,QAE/E6B,IAAK,SAASL,GACV,IACIxB,EADOzf,KACMyf,MACjB,IAFWzf,KAEDuhB,MAAQN,EAAO,CACrB,IAKIO,EACAzmB,EAAGgD,EAAGsiB,EANNoB,EAAO,EACPC,EAAO,GAAM,EAAIpD,EACjBqD,EAAO,EACPC,EAAO,EACPC,EAAO,EAGX,IAAK9mB,EAVEiF,KAUOmf,GAAIpkB,GAVXiF,KAUqBof,GAAIrkB,IAC5B,IAAKgD,EAXFiC,KAWWqf,GAAIthB,GAXfiC,KAWyBsf,GAAIvhB,IAC5B,IAAKsiB,EAZNrgB,KAYeuf,GAAIc,GAZnBrgB,KAY6Bwf,GAAIa,IAG3BoB,GADAD,EAAO/B,EADMf,EAAc3jB,EAAEgD,EAAEsiB,KACH,EAE5BsB,GAASH,GAAQzmB,EAAI,IAAO2mB,EAC5BE,GAASJ,GAAQzjB,EAAI,IAAO2jB,EAC5BG,GAASL,GAAQnB,EAAI,IAAOqB,EAlBlC1hB,KAuBEuhB,KADLE,MACgBE,EAAKF,MAAUG,EAAKH,MAAUI,EAAKJ,QAI5CC,GA3BJ1hB,KA2BiBmf,GA3BjBnf,KA2B2Bof,GAAK,GAAK,MACjCsC,GA5BJ1hB,KA4BiBqf,GA5BjBrf,KA4B2Bsf,GAAK,GAAK,MACjCoC,GA7BJ1hB,KA6BiBuf,GA7BjBvf,KA6B2Bwf,GAAK,GAAK,IAIhD,OAjCWxf,KAiCCuhB,MAEhBO,SAAU,SAASvO,GACf,IACIwO,EAAOxO,EAAM,IAAMgL,EAGvB,OAFIyD,KAAOzO,EAAM,IAAMgL,EACnB0D,KAAO1O,EAAM,IAAMgL,EACfwD,GAJG/hB,KAIUmf,IAAM4C,GAJhB/hB,KAI6Bof,IAChC4C,MALGhiB,KAKUqf,IAAM2C,MALhBhiB,KAK6Bsf,IAChC2C,MANGjiB,KAMUuf,IAAM0C,MANhBjiB,KAM6Bwf,KAahDE,EAAK/iB,WACDgN,KAAM,SAASiW,GACX5f,KAAK2f,OAAOhW,MACRiW,KAAMA,EACN5a,MAAO4a,EAAK0B,SAGpB7K,QAAS,WACL,OAAOzW,KAAK2f,OAAO5B,IAAI,SAASmE,GAAM,OAAOA,EAAGld,SAEpD8U,KAAM,WACF,OAAO9Z,KAAK2f,OAAO7F,QAEvBiE,IAAK,SAAS/Y,GAEV,IADA,IAAI2a,EAAS3f,KAAK2f,OACT5kB,EAAE,EAAGA,EAAE4kB,EAAO7F,OAAQ/e,IAC3B,GAAI4kB,EAAOX,KAAKjkB,GAAG6kB,KAAKkC,SAAS9c,GAC7B,OAAO2a,EAAOX,KAAKjkB,GAAGiK,MAG9B,OAAOhF,KAAKmiB,QAAQnd,IAExBmd,QAAS,SAASnd,GAGd,IAFA,IACIod,EAAIvB,EAAIwB,EADR1C,EAAS3f,KAAK2f,OAET5kB,EAAE,EAAGA,EAAE4kB,EAAO7F,OAAQ/e,MAC3B8lB,EAAKpjB,KAAK6kB,KACN7kB,KAAK8kB,IAAIvd,EAAM,GAAK2a,EAAOX,KAAKjkB,GAAGiK,MAAM,GAAI,GAC7CvH,KAAK8kB,IAAIvd,EAAM,GAAK2a,EAAOX,KAAKjkB,GAAGiK,MAAM,GAAI,GAC7CvH,KAAK8kB,IAAIvd,EAAM,GAAK2a,EAAOX,KAAKjkB,GAAGiK,MAAM,GAAI,KAExCod,QAAanlB,IAAPmlB,KACXA,EAAKvB,EACLwB,EAAS1C,EAAOX,KAAKjkB,GAAGiK,OAGhC,OAAOqd,GAEXG,QAAS,WAEL,IAAI7C,EAAS3f,KAAK2f,OAClBA,EAAOZ,KAAK,SAASre,EAAED,GAAK,OAAOud,EAAGE,aAAaF,EAAGG,IAAIzd,EAAEsE,OAAQgZ,EAAGG,IAAI1d,EAAEuE,UAG7E,IAAIyd,EAAS9C,EAAO,GAAG3a,MACnByd,EAAO,GAAK,GAAKA,EAAO,GAAK,GAAKA,EAAO,GAAK,IAC9C9C,EAAO,GAAG3a,OAAS,EAAE,EAAE,IAG3B,IAAI0d,EAAM/C,EAAO3hB,OAAO,EACpB2kB,EAAUhD,EAAO+C,GAAK1d,MACtB2d,EAAQ,GAAK,KAAOA,EAAQ,GAAK,KAAOA,EAAQ,GAAK,MACrDhD,EAAO+C,GAAK1d,OAAS,IAAI,IAAI,SAoNrC8Y,SAlFJ,SAAkB8E,EAAQC,GAEtB,IAAKD,EAAO5kB,QAAU6kB,EAAY,GAAKA,EAAY,IAE/C,OAAO,EAKX,IAAIpD,EArIR,SAAkBmD,GACd,IAEInP,EAAOsO,EAAMC,EAAMC,EADnBxC,EAAQ,IAAIqD,MADA,GAAM,EAAIxE,GAU1B,OAPAsE,EAAOzU,QAAQ,SAASoF,GACpBwO,EAAOxO,EAAM,IAAMgL,EACnByD,EAAOzO,EAAM,IAAMgL,EACnB0D,EAAO1O,EAAM,IAAMgL,EACnB9K,EAAQiL,EAAcqD,EAAMC,EAAMC,GAClCxC,EAAMhM,IAAUgM,EAAMhM,IAAU,GAAK,IAElCgM,EA0HKsD,CAASH,GAKrBnD,EAAMtR,QAAQ,cAMd,IAAIyR,EAlIR,SAAwBgD,EAAQnD,GAC5B,IAGIsC,EAAMC,EAAMC,EAHZe,EAAK,IAASC,EAAK,EACnBC,EAAK,IAASC,EAAK,EACnBC,EAAK,IAASC,EAAK,EAcvB,OAXAT,EAAOzU,QAAQ,SAASoF,GACpBwO,EAAOxO,EAAM,IAAMgL,EACnByD,EAAOzO,EAAM,IAAMgL,EACnB0D,EAAO1O,EAAM,IAAMgL,EACfwD,EAAOiB,EAAMA,EAAOjB,EACfA,EAAOkB,IAAMA,EAAOlB,GACzBC,EAAOkB,EAAMA,EAAOlB,EACfA,EAAOmB,IAAMA,EAAOnB,GACzBC,EAAOmB,EAAMA,EAAOnB,EACfA,EAAOoB,IAAOA,EAAOpB,KAE3B,IAAI/C,EAAK8D,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAM5D,GAiHzC6D,CAAeV,EAAQnD,GAC9B8D,EAAK,IAAI5E,EAAO,SAASje,EAAED,GAAK,OAAOud,EAAGE,aAAaxd,EAAEmf,QAASpf,EAAEof,WAIxE,SAAS2D,EAAKC,EAAIje,GAId,IAHA,IAEIoa,EAFA8D,EAAU,EACVC,EAAS,EAENA,EAASnF,GAEZ,IADAoB,EAAO6D,EAAG3K,OACA+G,QAAV,CAMA,IAAIF,EAASI,EAAeN,EAAOG,GAC/Be,EAAQhB,EAAO,GACfiB,EAAQjB,EAAO,GAEnB,IAAKgB,EAED,OAOJ,GALA8C,EAAG9Z,KAAKgX,GACJC,IACA6C,EAAG9Z,KAAKiX,GACR8C,KAEAA,GAAWle,EAAQ,OACvB,GAAIme,IAAWnF,EAEX,YArBAiF,EAAG9Z,KAAKiW,GACR+D,IAXZJ,EAAG5Z,KAAKiW,GAqCR4D,EAAKD,EAAI9E,EAAqBoE,GAM9B,IAHA,IAAIe,EAAM,IAAIjF,EAAO,SAASje,EAAED,GAC5B,OAAOud,EAAGE,aAAaxd,EAAEmf,QAAQnf,EAAEof,SAAUrf,EAAEof,QAAQpf,EAAEqf,YAEtDyD,EAAGzJ,QACN8J,EAAIja,KAAK4Z,EAAGzK,OAIhB0K,EAAKI,EAAKf,EAAYe,EAAI9J,QAI1B,IADA,IAAI+D,EAAO,IAAI6B,EACRkE,EAAI9J,QACP+D,EAAKlU,KAAKia,EAAI9K,OAGlB,OAAO+E,IAvZD,GA+ZdrjB,EAAOD,QAAU6iB,0zBCpcjB,IAAMjK,EAAK7V,EAAQ,GACbumB,EAAevmB,EAAQ,IAEvB8W,cACF,SAAAA,EAAYzR,GAAS,mGAAAH,CAAAxC,KAAAoU,GACjBzR,EAAQK,SAAW,IAAImQ,EAAG3H,OAAO/G,aAC7BhG,SAAU,IACVG,SAAU,IACVF,MAAO,GACPG,OAAQ,KAGZ8D,EAAQsJ,WAAa,IAAI4X,GACrB7gB,SAAUL,EAAQK,WATLH,EAAA7C,KAAA8C,EAAAsR,GAAAlZ,KAAA8E,KAWX2C,gPAZOwQ,EAAG3H,OAAOX,6FAediZ,QACO7mB,IAAZ6mB,IACAA,EAAU,GAId,IAAI9e,EAAQ6e,EAAatI,WAEzB,OAAgB,IAAZuI,EACO9e,EAAM+e,QAAQ,MAAM,IAAID,EAAQ,KAEhC9e,WAKnBxK,EAAOD,QAAU6Z,m3BClCjB,IAAMjB,EAAK7V,EAAQ,GAYb8W,cAWF,SAAAA,EAAYzR,GAAS,mGAAAH,CAAAxC,KAAAoU,GAAAvR,EAAA7C,KAAA8C,EAAAsR,GAAAlZ,KAAA8E,KACX2C,gPAZOwQ,EAAG3H,OAAOnH,uDACD,MAAO,0DACJ,MAAO,yDACR,MAAO,uDAET,MAAO,oDACR,MAAO,sDACL,MAAO,sDAEP,MAAO,oDAM5BC,EAAQpF,EAAGC,EAAGoF,GAAQ,IAAAkW,EAOpBza,KAAK0a,gBAALtd,MAAA4C,KAAwBga,WALxBxV,EAFoBiW,EAEpBjW,QACA9F,EAHoB+b,EAGpB/b,MACAG,EAJoB4b,EAIpB5b,OACAmlB,EALoBvJ,EAKpBuJ,QAKAC,EAAQ9kB,EAVYsb,EAMpByJ,QAKAC,EAAQjlB,EAAI8kB,EAChBxf,EAAQ4f,UAAUllB,EAAGC,GAErBqF,EAAQ6f,OAAO9f,EAAOL,eAAiBzG,KAAKsE,GAAG,GAC/C/B,KAAKskB,WAAW9f,EAAS,EAAG,GAC5BxE,KAAKukB,WAAW/f,GAAS,KAAmByf,GAC5CjkB,KAAKwkB,WAAWhgB,GAAS,IAzCZigB,GAyC+BR,GAC5CjkB,KAAK0kB,UAAUlgB,GAAS,KA1CXigB,GA0C6BR,EAxC7BU,IAyCb3kB,KAAK4kB,WAAWpgB,EAASmgB,IA3CZF,GA2C8BR,EAzC9BU,GAyCmEpgB,GAC5E5J,OAAOia,QACPpQ,EAAQyX,YACRzX,EAAQqgB,YAAc,OACtBrgB,EAAQkX,UAAY,kBAEpBlX,EAAQsB,MAAMqe,EAjDLM,GAiDaR,EAAsBvlB,EAAOG,GACnD2F,EAAQoX,OACRpX,EAAQsgB,SACRtgB,EAAQ6X,aAEZ7X,EAAQ6f,QAAQ9f,EAAOL,eAAiBzG,KAAKsE,GAAG,GAChDyC,EAAQ4f,WAAWllB,GAAIC,sCAIhBqF,EAASwf,EAASE,GACzB1f,EAAQyX,YACRzX,EAAQkX,UAAY,OACpBlX,EAAQsB,KAAKke,EAASE,EA/DV,EACCO,IA+DbjgB,EAAQoX,0CAGDpX,EAASwf,EAASE,GACzB1f,EAAQyX,YACR,IAAI8I,EAAWvgB,EAAQwgB,qBAAqBhB,EAASE,EAASF,EAnElD,GAmEyEE,GACrFa,EAASE,aAAa,EAAG,QACzBF,EAASE,aAAa,IAAK,QAC3BF,EAASE,aAAa,IAAK,QAC3BF,EAASE,aAAa,EAAG,QACzBzgB,EAAQkX,UAAYqJ,EACpBvgB,EAAQsB,KAAKke,EAASE,EAzEV,GACCS,IAyEbngB,EAAQoX,yCAGFpX,EAASwf,EAASE,GACxB1f,EAAQyX,YACRzX,EAAQkX,UAAY,OACpBlX,EAAQqgB,YAAc,OACtBrgB,EAAQsB,KAAKke,EAASE,EA/EX,GACCgB,IA+EZ1gB,EAAQoX,OACRpX,EAAQsgB,4CAGDtgB,EAAS2gB,EAAeC,GAC/B5gB,EAAQyX,YACRzX,EAAQ6gB,IAAIF,EAAeC,EApFd,GAoF2C,EAAGjS,EAAGvH,UAAUrO,UAAUC,KAClFgH,EAAQkX,UAAY,OACpBlX,EAAQqgB,YAAc,OACtBrgB,EAAQoX,OACRpX,EAAQsgB,4CAGDtgB,EAASwf,EAASE,EAAS3f,GAClC,IACI+gB,EAAQtB,EADKuB,IAEbC,EAAQtB,EAFKqB,IAKjB/gB,EAAQyX,YACR,IAAIwJ,EAAQjhB,EAAQkhB,qBAAqBJ,EAAOE,EAN/BD,IAMkDD,EAAOE,EAtG9D,IAuGZC,EAAMR,aAAa,EAAG1gB,EAAOohB,gBAC7BF,EAAMR,aAAa,GAAK1gB,EAAOohB,aAAa,KAC5CF,EAAMR,aAAa,EAAG1gB,EAAOohB,aAAa,IAC1CnhB,EAAQ6gB,IAAIC,EAAOE,EA1GP,GA0G2B,EAAGrS,EAAGvH,UAAUrO,UAAUC,KACjEgH,EAAQkX,UAAY+J,EACpBjhB,EAAQoX,OAGRpX,EAAQyX,YACRzX,EAAQkX,UAAY,OACpBlX,EAAQqgB,YAAc,OACtBrgB,EAAQsB,KAAKke,EAASE,EAlBLqB,IAhGL,MAMe,KA6G3B/gB,EAAQoX,OACRpX,EAAQsgB,iDAGIxgB,EAAQpF,EAAGC,EAAGoF,GAC1B,IAAIxF,EAAMiB,KAAKkH,cAAcvC,yBAC7B,OACIH,QAASF,EAAO0K,WAAW,MAC3BtQ,MAAOK,EAAIL,MACXG,OAAQE,EAAIF,OACZmlB,QAAUjlB,EAAIN,SAIdylB,QAAUnlB,EAAIH,SAlIL6lB,aAuIrBjqB,EAAOD,QAAU6Z,opBC1IjB,IAAMjB,EAAK7V,EAAQ,GAEb+W,cACF,SAAAA,EAAa1R,GAAS,IAAAC,EAAA,mGAAAJ,CAAAxC,KAAAqU,IAClBzR,EAAAC,EAAA7C,KAAA8C,EAAAuR,GAAAnZ,KAAA8E,KAAMvE,OAAOmI,QACTuD,OAAS,EACRC,IAAM,EACNC,aAAe,GACjB1E,MACEijB,SAAWjjB,EAAQgT,OAExB/S,EAAKqQ,OAAO,SAAC3N,GACT1C,EAAKgjB,SAASxhB,aAAa+O,EAAGvH,UAAUxN,SAASwD,aAAagB,EAAKgjB,SAAS1e,cAAcyB,YAAarD,EAAIgF,qBAT7F1H,8OADCuQ,EAAG1H,GAAGxE,YAejCzM,EAAOD,QAAU8Z","file":"opaque.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"opaque\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"opaque\"] = factory();\n\telse\n\t\troot[\"opaque\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"twocylinder\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twocylinder\"] = factory();\n\telse\n\t\troot[\"twocylinder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","const Vector = require('./vector')\r\n\r\nConstants = {\r\n    TAU : Math.PI * 2\r\n}\r\n\r\nFunctions = {\r\n    disjoinArray2FromArray1(array1, array2, onEachMatchCallback) {\r\n        if (!array2.length) {\r\n            return\r\n        }\r\n        let i\r\n        let j\r\n        for (i=0; i<array2.length; i++) {\r\n            for(j=0; j<array1.length; j++){\r\n                if(array1[j].__id === array2[i].__id){\r\n                    if (typeof onEachMatchCallback === 'function') {\r\n                        onEachMatchCallback(array1[j])\r\n                    }\r\n                    delete array1[j].__id\r\n                    array1.splice(j,1)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    },\r\n    clone (obj) {\r\n        // TODO: Could this be improved? Taken from  https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\r\n        return Object.assign( Object.create( Object.getPrototypeOf(obj)), obj)\r\n    }\r\n}\r\n\r\nGeometry = {\r\n    /***************************************************\r\n     * BOXES\r\n     ***************************************************/\r\n    boxCollidesBox (box1, box2){\r\n        // both box1 and box 2 must have { x, y, width, height } properties\r\n        // if any part of box1's X is within box2's\r\n        let xOverlap = (\r\n            (\r\n                ( box1.origin_x <= box2.origin_x )\r\n                &&\r\n                ( (box1.origin_x + box1.width) > box2.origin_x )\r\n            )\r\n            ||\r\n            (\r\n                ( box2.origin_x <= box1.origin_x )\r\n                &&\r\n                ( (box2.origin_x + box2.width) > box1.origin_x )\r\n            )\r\n        )\r\n        let yOverlap = (\r\n            (\r\n                ( box1.origin_y <= box2.origin_y )\r\n                &&\r\n                ( (box1.origin_y + box1.height) > box2.origin_y )\r\n            )\r\n            ||\r\n            (\r\n                ( box2.origin_y <= box1.origin_y )\r\n                &&\r\n                ( (box2.origin_y + box2.height) > box1.origin_y )\r\n            )\r\n        )\r\n\r\n        return xOverlap && yOverlap\r\n    }\r\n    ,boxCollidesCircle (box, circle) {\r\n        let point1 = {x:box.origin_x, y:box.origin_y}\r\n        let point2 = {x:box.origin_x + box.width, y:box.origin_y}\r\n        let point3 = {x:box.origin_x + box.width, y:box.origin_y + box.height}\r\n        let point4 = {x:box.origin_x, y:box.origin_y + box.height}\r\n\r\n        let line1 = [point1,point2]\r\n        let line2 = [point2,point3]\r\n        let line3 = [point3,point4]\r\n        let line4 = [point4,point1]\r\n\r\n        return Geometry.pointCollidesBox(circle, box)\r\n            || Geometry.lineCollidesCircle(line1, circle, true)\r\n            || Geometry.lineCollidesCircle(line2, circle, true)\r\n            || Geometry.lineCollidesCircle(line3, circle, true)\r\n            || Geometry.lineCollidesCircle(line4, circle, true)\r\n    }\r\n    ,boxCollidesPoint (box, point){\r\n        return (\r\n            (\r\n                ( point.x >= box.origin_x )\r\n                &&\r\n                ( (box.origin_x + box.width) >= point.x )\r\n            )\r\n            &&\r\n            (\r\n                ( point.y >= box.origin_y )\r\n                &&\r\n                ( (box.origin_y + box.height) >= point.y )\r\n            )\r\n        )\r\n    }\r\n\r\n    /***************************************************\r\n     * CIRCLES\r\n     ***************************************************/\r\n    ,circleCollidesCircle (circle1, circle2){\r\n        return this.distanceToPoint(circle1,circle2) < (circle1.radius + circle2.radius)\r\n    }\r\n    ,circleCollidesBox (circle, box){\r\n        return Geometry.boxCollidesCircle(box,circle)\r\n    }\r\n    ,circleCollidesLine (circle,line, isSegment){\r\n        return Geometry.lineCollidesCircle(line,cricle,isSegment)\r\n    }\r\n    ,circleCollidesPoint (circle, point){\r\n        return Geometry.pointCollidesCircle(point, circle)\r\n    }\r\n\r\n\r\n    /***************************************************\r\n     * LINES\r\n     ***************************************************/\r\n    // This function returns an array of up to length 2 with points indicating at what points\r\n    // the given circle is intersected by the given line\r\n    ,lineIntersectsCircle (line, circle, isSegment){\r\n        let b = line[0]\r\n        let a = line[1]\r\n\r\n        // Calculate the euclidean distance between a & b\r\n        let eDistAtoB = Math.sqrt( Math.pow(b.x-a.x, 2) + Math.pow(b.y-a.y, 2) )\r\n\r\n        // compute the direction vector d from a to b\r\n        let d = { x : (b.x-a.x)/eDistAtoB, y : (b.y-a.y)/eDistAtoB }\r\n\r\n        // Now the line equation is x = dx*t + ax, y = dy*t + ay with 0 <= t <= 1.\r\n\r\n        // compute the value t of the closest point to the circle center (cx, cy)\r\n        let t = (d.x * (circle.x-a.x)) + (d.y * (circle.y-a.y))\r\n\r\n        // compute the coordinates of the point e on line and closest to c\r\n        let e = {\r\n            x : (t * d.x) + a.x,\r\n            y : (t * d.y) + a.y\r\n        }\r\n\r\n        // Calculate the euclidean distance between circle & e\r\n        let eDistCtoE = Math.sqrt( Math.pow(e.x-circle.x, 2) + Math.pow(e.y-circle.y, 2) )\r\n\r\n        let retVal = []\r\n\r\n        // test if the line intersects the circle\r\n        if( eDistCtoE < circle.radius ) {\r\n            // compute distance from t to circle intersection point\r\n            let dt = Math.sqrt( Math.pow(circle.radius, 2) - Math.pow(eDistCtoE, 2))\r\n\r\n            // compute first intersection point\r\n            let f = {\r\n                x : ((t-dt) * d.x) + a.x,\r\n                y : ((t-dt) * d.y) + a.y\r\n            }\r\n\r\n            if(!isSegment || Geometry.lineCollidesPoint(line, f, true)){\r\n                retVal.push(f)\r\n            }\r\n\r\n            // compute second intersection point\r\n            let g = {\r\n                x : ((t+dt) * d.x) + a.x,\r\n                y : ((t+dt) * d.y) + a.y\r\n            }\r\n\r\n            if(!isSegment || Geometry.lineCollidesPoint(line, g, true)){\r\n                retVal.push(g)\r\n            }\r\n        } else if (parseInt(eDistCtoE) === parseInt(circle.radius)) {\r\n            if(!isSegment || Geometry.lineCollidesPoint(line, e, true)){\r\n                retVal.push(e)\r\n            }\r\n        } else {\r\n            // do nothing, no intersection\r\n        }\r\n\r\n        return retVal\r\n    }\r\n\r\n    // true IFF a line passes through or tangent to a given circle\r\n    ,lineCollidesCircle (line, circle, isSegment){\r\n        let intersects = Geometry.lineIntersectsCircle(line, circle, isSegment)\r\n        return intersects.length > 0 || Geometry.pointCollidesCircle(line[0],circle)\r\n    }\r\n\r\n    ,lineCollidesPoint (line, point, isSegment){\r\n        let angleToPoint1 = Geometry.angleToPoint(line[0],point)\r\n        let angleToPoint2 = Geometry.angleToPoint(line[1],point)\r\n\r\n        let retVal = angleToPoint1 === angleToPoint2\r\n\r\n        // if the angle is off, we swap the order of two of the points for one of the measurements\r\n        // this simulates the 180 degree check\r\n        if(!retVal){\r\n            angleToPoint2 = Geometry.angleToPoint(point, line[1])\r\n            retVal = angleToPoint1 === angleToPoint2\r\n        }\r\n\r\n        if(retVal && isSegment){\r\n            retVal = Geometry.distanceToPoint(line[0],point) + Geometry.distanceToPoint(line[1],point)\r\n                === Geometry.distanceToPoint(line[0],line[1])\r\n        }\r\n\r\n        return retVal\r\n    }\r\n\r\n\r\n    /***************************************************\r\n     * POINTS\r\n     ***************************************************/\r\n    ,pointCollidesCircle (point, circle){\r\n        return Geometry.distanceToPoint(point,circle) <= circle.radius\r\n    }\r\n    ,pointCollidesBox (point, box){\r\n        return Geometry.boxCollidesPoint(box, point)\r\n    }\r\n    ,pointCollidesPoint (point1, point2){\r\n        return (\r\n            ( point1.x === point2.x )\r\n            &&\r\n            ( point1.y === point2.y )\r\n        )\r\n    }\r\n    ,pointCollidesLine (point, line){\r\n        return Geometry.lineCollidesPoint(line,point)\r\n    }\r\n\r\n    /***************************************************\r\n     * ANGLES AND DISTANCES\r\n     ***************************************************/\r\n    ,distanceToPoint (point1, point2){\r\n        let x = point1.x - point2.x\r\n        let y = point1.y - point2.y\r\n\r\n        return Math.sqrt( x*x + y*y )\r\n    }\r\n    ,angleToPoint (point1, point2, inDegrees){\r\n        let radians = Math.atan2(point2.y - point1.y, point2.x - point1.x)\r\n        return inDegrees ? ( radians * 180 / Math.PI ) : radians\r\n    }\r\n    /**\r\n     * @param {{x:*. y:*}} point1\r\n     * @param {{x:*. y:*}} point2\r\n     * @returns {Vector}\r\n     */\r\n    ,pointToPoint (point1, point2){\r\n        return new Vector({\r\n            speed : Geometry.distanceToPoint(point1,point2),\r\n            direction : Geometry.angleToPoint(point1,point2)\r\n        })\r\n    }\r\n    /**\r\n     * @param {{x:*,y:*}} point1\r\n     * @param {Vector} vector\r\n     * @returns {{x: *, y: *}}\r\n     */\r\n    ,pointFromVector (point1, vector){\r\n        return {\r\n            x : point1.x + Math.cos(vector.getDirection()) * vector.getSpeed(),\r\n            y : point1.y + Math.sin(vector.getDirection()) * vector.getSpeed()\r\n        }\r\n    }\r\n    ,getRandomDirection () {\r\n        return Math.random() * 2 * Math.PI\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    Geometry,\r\n    Functions,\r\n    Constants\r\n}","class Root {\r\n    constructor() {\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = Root","const Root = require('./root')\r\nconst Bounding = require ('./bounding/bounding')\r\n\r\nclass Generic extends Root {\r\n\r\n    constructor (options) {\r\n        super (options)\r\n        this.setBounding(options.bounding)\r\n    }\r\n\r\n    collides (bounding) {\r\n        return this._bounding && this._bounding.collides(bounding)\r\n    }\r\n\r\n    getBounding () {\r\n        return this._bounding\r\n    }\r\n\r\n    setBounding (b) {\r\n        if(!b && ! (b instanceof Bounding)){\r\n            throw \"All objects must have a true bounding\"\r\n        }\r\n        return this._bounding = b\r\n    }\r\n}\r\n\r\nmodule.exports = Generic","/*\r\n    Profiles are used to remove the ambiguity with determining bounding box\r\n*/\r\n\r\nconst Root = require('../root')\r\n\r\nclass Bounding extends Root {\r\n    constructor (options){\r\n        super(options)\r\n        this.rotation = 0;\r\n        Object.entries(options).forEach((tuple) => {\r\n            this[tuple[0]] = tuple[1]\r\n        })\r\n    }\r\n    getCenter (){\r\n        return { x : null, y : null };\r\n    }\r\n    setCenter (tuple){\r\n        return null;\r\n    }\r\n    setCenterWithinContainer (tuple,bounding){\r\n        // if not implemented, just set the center normal style\r\n        return this.setCenter(tuple);\r\n    }\r\n    getContainingRectangle (){\r\n        return { origin_x : null, origin_y : null, width : null, height : null};\r\n    }\r\n    getRotation (){\r\n        return this.rotation;\r\n    }\r\n    setRotation (r){\r\n        this.rotation = r;\r\n    }\r\n    set (key, value){\r\n        if(typeof key === 'object'){\r\n            Object.entries(key).forEach((tuple) => {\r\n                this.set(...tuple)\r\n            })\r\n        }else{\r\n            this[key] = value\r\n        }\r\n        return this;\r\n    }\r\n    collides (bounding){\r\n        return false;\r\n    }\r\n}\r\n\r\nmodule.exports = Bounding","// CircleProfiles need a center point and a radius\r\n\r\nconst Bounding = require('./bounding')\r\nconst Geometry = require('../utilities').Geometry\r\n\r\nclass BoundingPoint extends Bounding {\r\n    getCenter (){\r\n        return { x : this.x, y : this.y };\r\n    }\r\n    setCenter (tuple){\r\n        this.x = tuple.x\r\n        this.y = tuple.y\r\n    }\r\n    getContainingRectangle (){\r\n        return{\r\n            origin_x : this.x\r\n            ,origin_y : this.y\r\n            ,width : 0\r\n            ,height : 0\r\n        }\r\n    }\r\n    collides (bounding){\r\n        if(bounding instanceof BoundingPoint){\r\n            return Geometry.pointCollidesPoint(this,bounding)\r\n        }else if(bounding instanceof Bounding){ \r\n            // if it's not a rectangle, circle, or point, it could be a new type of bounding\r\n            // in which case we let it handle the collision checking\r\n            return bounding.collides(this)\r\n        }else{ // treat bounding like a tuple\r\n            return Geometry.circleCollidesPoint(this, bounding)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = BoundingPoint","// CircleProfiles need a center point and a radius\r\n\r\nconst Bounding = require('./bounding')\r\nconst Geometry = require('../utilities').Geometry\r\nconst BoundingPoint = require('./bounding_point')\r\n\r\nclass BoundingCircle extends Bounding {\r\n    getCenter (){\r\n        return { x : this.x, y : this.y };\r\n    }\r\n    setCenter (tuple){\r\n        this.x = tuple.x;\r\n        this.y = tuple.y;\r\n    }\r\n    getContainingRectangle (){\r\n        return{\r\n            origin_x : this.x - this.radius\r\n            ,origin_y : this.y - this.radius\r\n            ,width : 2 * this.radius\r\n            ,height : 2 * this.radius\r\n        }\r\n    }\r\n    collides (bounding){\r\n        if(bounding instanceof BoundingCircle){\r\n            return Geometry.circleCollidesCircle(this,bounding);\r\n        }else if(bounding instanceof BoundingPoint){\r\n            return Geometry.circleCollidesPoint(this,bounding);\r\n        }else if(bounding instanceof Bounding){\r\n            // if it's not a rectangle, circle, or point, it could be a new type of bounding\r\n            // in which case we let it handle the collision checking\r\n            return bounding.collides(this);\r\n        }else{ // treat bounding like a tuple\r\n            return Geometry.circleCollidesPoint(this, bounding);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = BoundingCircle","/*\r\n This script defines the Vector object\r\n */\r\n\r\nconst Root = require('./root')\r\nconst Constants = require('./utilities').Constants\r\n\r\nclass Vector extends Root {\r\n    constructor (options) {\r\n        super (options)\r\n        options = Object.assign({\r\n            direction : 0,\r\n            speed : 0\r\n        },options)\r\n\r\n        this.__direction = options.direction\r\n        this.__speed = options.speed\r\n    }\r\n// ------------------------------------\r\n// GETTERS / SETTERS\r\n// ------------------------------------\r\n    getDirection (){\r\n        return this.__direction\r\n    }\r\n    getSpeed (){\r\n        return this.__speed\r\n    }\r\n    setDirection (dir){\r\n        this.__direction = dir\r\n    }\r\n    setSpeed  (speed) {\r\n        this.__speed = speed\r\n    }\r\n// ------------------------------------\r\n// CONVENIENCE FUNCTIONS\r\n// ------------------------------------\r\n    rotateTowards (dir, friction){\r\n        let currentDirection = this.getDirection()\r\n        let directionDiff = (dir + Constants.TAU - currentDirection) % Constants.TAU\r\n\r\n        friction = friction ? friction : 1\r\n        if (directionDiff <= (Math.PI) ){\r\n            this.setDirection(currentDirection + (directionDiff / friction))\r\n        }else{\r\n            this.setDirection(currentDirection - ( ( directionDiff - Math.PI ) / friction))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Vector","/*\r\n    This script defines an appearance.\r\n    Appearances are attached to instances and define how that instance should be drawn in the world\r\n*/\r\n\r\nconst Generic = require('./generic')\r\n\r\nclass Appearance extends Generic {\r\n    constructor (options) {\r\n        super(options)\r\n    }\r\n    \r\n    draw (canvas, x, y, entity){\r\n        let context = canvas.getContext('2d');\r\n        context.beginPath();\r\n        context.arc(x, y, 20, 0, 2 * Math.PI, false);\r\n        context.fillStyle = 'grey';\r\n        context.fill();\r\n        context.lineWidth = 5;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n    }\r\n}\r\n\r\nmodule.exports = Appearance","// RectangleProfiles need an origin x,y and a width and height\r\nconst Bounding = require('./bounding')\r\nconst Geometry = require('../utilities').Geometry\r\nconst BoundingCircle = require('./bounding_circle')\r\nconst BoundingPoint = require('./bounding_point')\r\n\r\nclass BoundingBox extends Bounding {\r\n    getCenter (){\r\n        return {\r\n            x : this.origin_x + (this.width / 2)\r\n            , y : this.origin_y + (this.height / 2)\r\n        };\r\n    }\r\n    setCenter (tuple){\r\n        this.origin_x = tuple.x - (this.width / 2);\r\n        this.origin_y = tuple.y - (this.height / 2);\r\n    }\r\n    // TODO: This won't work properly with circles... Perhaps move it to the Geometry function and treat it like collisions\r\n    setCenterWithinBounding (tuple, bounding){\r\n        let containingBox = bounding.getContainingRectangle();\r\n        let myBox = this.getContainingRectangle();\r\n        \r\n        \r\n        let targetX = tuple.x;\r\n        let targetY = tuple.y;\r\n        \r\n        if(containingBox.width < myBox.width){\r\n            targetX = bounding.getCenter().x;\r\n        }else{\r\n            // to center within we take the min between x and the containingbox edge - 1/2 my width\r\n            targetX = Math.min(tuple.x, containingBox.origin_x + containingBox.width - (myBox.width/2) );\r\n            // then max it with the same on the other end\r\n            targetX = Math.max(targetX, containingBox.origin_x + (myBox.width/2));\r\n            // this ensures, when centered, our left and right edges do not cross the containingBox borders \r\n        }\r\n        \r\n        // Then, do it again for height\r\n        \r\n        if(containingBox.height < myBox.height){\r\n            targetY = bounding.getCenter().y;\r\n        }else{\r\n            // to center within we take the min between x and the containingbox edge - 1/2 my width\r\n            targetY = Math.min(tuple.y, containingBox.origin_y + containingBox.height - (myBox.height/2) );\r\n            // then max it with the same on the other end\r\n            targetY = Math.max(targetY, containingBox.origin_y + (myBox.height/2));\r\n            // this ensures, when centered, our left and right edges do not cross the containingBox borders\r\n        }\r\n        \r\n        this.setCenter({ x : targetX , y : targetY });\r\n    }\r\n\r\n    getContainingRectangle (){\r\n        return {\r\n            origin_x : this.origin_x\r\n            ,origin_y : this.origin_y\r\n            ,width : this.width\r\n            ,height : this.height\r\n        };\r\n    }\r\n\r\n    collides (bounding){\r\n        if(bounding instanceof BoundingBox){\r\n            return Geometry.boxCollidesBox(this,bounding)\r\n        }else if(bounding instanceof BoundingCircle){\r\n            return Geometry.boxCollidesCircle(this,bounding);\r\n        }else if(bounding instanceof BoundingPoint){\r\n            return Geometry.boxCollidesPoint(this,bounding);\r\n        }else if(bounding instanceof Bounding){\r\n            // if it's not a rectangle, circle, or point, it could be a new type of bounding\r\n            // in which case we let it handle the collision checking\r\n            return bounding.collides(this);\r\n        }else{ // treat bounding like a tuple\r\n            return Geometry.boxCollidesPoint(this, bounding);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = BoundingBox","/*\r\n    Backgrounds are objects that control how the game background should appear. \r\n    At most, there should be one per world. \r\n*/\r\n\r\nconst Root = require('./root')\r\n\r\nclass Background extends Root {\r\n    constructor (options) {\r\n        super(options)\r\n        options = Object.assign({\r\n            color : 'transparent'\r\n        }, options)\r\n        this._color = options.color\r\n    }\r\n    draw (view){\r\n        let canvas = view.getCanvas()\r\n        let containingRectangle = view.getBounding().getContainingRectangle()\r\n        let context = canvas.getContext('2d')\r\n        context.beginPath()\r\n        context.fillStyle = this._color\r\n        context.fillRect(0,0,containingRectangle.width,containingRectangle.height)\r\n        context.fill()\r\n        context.stroke()\r\n    }\r\n}\r\n\r\nmodule.exports = Background","/*\r\n    This script creates a basic user interface\r\n*/\r\n\r\nconst BoundingPoint = require('../engine/bounding/bounding_point')\r\nconst Geometry = require('../engine/utilities').Geometry\r\n\r\nclass Event extends BoundingPoint {\r\n    static get EVENT_TYPES() {\r\n        return {\r\n            TAP : 'tap',\r\n            DOUBLE : 'doubletap',\r\n            LONG :'longtap',\r\n            MOVE : 'mousemove',\r\n            UP : 'mouseup',\r\n            DOWN : 'mousedown'\r\n        };\r\n    }\r\n\r\n    constructor (evt, view){\r\n        // -----------------------------------------------------\r\n        // This part was taken from Stack Overflow\r\n        // http://stackoverflow.com/questions/8389156\r\n        let el = evt.target,\r\n            x = 0,\r\n            y = 0\r\n\r\n        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {\r\n            x += el.offsetLeft - el.scrollLeft\r\n            y += el.offsetTop - el.scrollTop\r\n            el = el.offsetParent\r\n        }\r\n        // -----------------------------------------------------\r\n\r\n        super ({\r\n            x : evt.clientX - x\r\n            ,y : evt.clientY - y\r\n        })\r\n\r\n        if (view){\r\n            this.world_x = (this.x + view.getBounding().origin_x) / view.getResolution()\r\n            this.world_y = (this.y + view.getBounding().origin_y) / view.getResolution()\r\n            let rect = view.getCanvas().getBoundingClientRect()\r\n            this.device_x = this.x + rect.left\r\n            this.device_y = this.y + rect.top\r\n        }\r\n        \r\n        this.timestamp = Date.now()\r\n    }\r\n    linkEvent (evt){\r\n        // we want them to only link events\r\n        if(evt instanceof Event){\r\n            this.linked_event = evt; \r\n            this.velocity = Geometry.pointToPoint(this.linked_event, this)\r\n        }\r\n        \r\n        return this\r\n    }\r\n    setType (eventType){\r\n        if(Object.values(Event.EVENT_TYPES).indexOf(eventType) === -1){\r\n            throw \"Invalid event type\"\r\n        }\r\n        this.type = eventType\r\n        return this\r\n    }\r\n    getType (){\r\n        return this.type ? this.type : null;\r\n    }\r\n    getWorldCenter() {\r\n        return  {\r\n            x: this.world_x,\r\n            y: this.world_y\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Event","/*\r\n    This script creates a basic user interface\r\n*/\r\n\r\nconst Event = require('./event')\r\nconst Geometry = require('../engine/utilities').Geometry\r\nconst Generic = require('../engine/generic')\r\n\r\nclass Touch extends Generic {\r\n    constructor (options){\r\n        //by default the touch location is the full canvas\r\n        options = Object.assign({\r\n            bounding : options.view.getBounding()\r\n            ,double : 300\r\n            ,tap : 300\r\n            ,tap_distance : 20\r\n        }, options)\r\n\r\n        super(options)\r\n        this.__view = options.view\r\n        \r\n        this.setBounding(options.bounding)\r\n        \r\n        this._doubleTapThreshold = options.double\r\n        this._tapThreshold = options.tap\r\n        this._tapDistanceThreshold = options.tap_distance\r\n        this._longTapCancel = 2 * this._tapThreshold\r\n        \r\n        // absolute touch boxes are bound to the world which means the calculate touching\r\n        // via worldy coordinate systems as opposed to the view's relative coordinates [default]\r\n        if(options.absolute){\r\n            this.__boundToWorld = true\r\n        }\r\n        \r\n        // these events store the last events -- TODO : Maybe make them arrays? Store the trailing events?\r\n        this._lastUp = null\r\n        this._lastDown = null\r\n        this._lastMove = null\r\n        \r\n        // create a listener for each type of event\r\n        Object.values(Event.EVENT_TYPES).forEach((val) => {\r\n            this.__getListenersByType.call(this,val)\r\n        })\r\n        \r\n        // id is set by the view when the touch object is inserted\r\n        this.__id = null\r\n\r\n        // key is used to track touch listeners\r\n        this.__key = 0\r\n        \r\n        // used to check if the touch is currently down\r\n        this.__isDown = false\r\n\r\n        // if we should be firing move events\r\n        this.__isTracking = true;\r\n        \r\n        // What follows are the browser event binding calls\r\n        let that = this\r\n        this.__view.getCanvas().addEventListener('mousedown',function(evt){\r\n            that._handleDown.apply(that,arguments)\r\n        },false)\r\n        this.__view.getCanvas().addEventListener('touchstart',function(evt){\r\n            evt.preventDefault()\r\n            that._handleDown.apply(that,arguments)\r\n        },false)\r\n        \r\n        this.__view.getCanvas().addEventListener('mouseup',function(evt){\r\n            that._handleUp.apply(that,arguments)\r\n        },false)\r\n        this.__view.getCanvas().addEventListener('touchend',function(evt){\r\n            evt.preventDefault()\r\n            that._handleUp.apply(that,arguments)\r\n        },false)\r\n        \r\n        this.__view.getCanvas().addEventListener('mousemove',function(evt){\r\n            that._handleMove.apply(that,arguments)\r\n        },false)\r\n        this.__view.getCanvas().addEventListener('touchmove',function(evt){\r\n            evt.preventDefault()\r\n            that._handleMove.apply(that,arguments)\r\n        },false)\r\n\r\n        // add this IO to the view\r\n        this.__view.addIO(this)\r\n    }\r\n    /*\r\n     * If this touch has an appearance, we draw it\r\n     */\r\n    draw (){\r\n        if(this.getAppearance()){\r\n            this.getAppearance().draw(\r\n                this.__view.getCanvas(), \r\n                this.getBounding().getCenter().x,\r\n                this.getBounding().getCenter().y, \r\n                this\r\n            )\r\n        }\r\n    }\r\n    /*\r\n     * Appearance will be important for extended objects wishing to give the touch zones a visual represenation\r\n     */\r\n    setAppearance (app){\r\n        this.__appearance = app\r\n    }\r\n    \r\n    getAppearance (app){\r\n        return this.__appearance\r\n    }\r\n    \r\n    /*\r\n     * These function receive a browser event and determin whether or not\r\n     * to fire an IO event to listeners based on collision type, location, and touch state\r\n     * They are also responsible with properly formatting the IO event (determining if it's\r\n     * a single tap, double tap, move, etc...)\r\n     */\r\n    _handleDown (evt){\r\n        let event = this.__formatTouchEvent(evt)\r\n        if(!event){\r\n            return\r\n        }\r\n        event.setType(Event.EVENT_TYPES.DOWN)\r\n\r\n        this.__isDown = true\r\n        this.__lastDown = event\r\n        this.__fireEvent(event)\r\n    }\r\n    _handleUp (evt){\r\n        let event = this.__formatTouchEvent(evt)\r\n        if(!event){\r\n            return\r\n        }\r\n        \r\n        if(!this.isDown()){\r\n            return\r\n        }\r\n        \r\n        // found is used to determine if we've already assigned a type to this event before checking for others\r\n        // it's really just a helper variable so we can avoid deeply nested if / else ifs\r\n        let found = false\r\n        \r\n        // first we check for DOUBLE tap\r\n        if( this.__lastUp \r\n            && this.__lastUp.type === Event.EVENT_TYPES.TAP\r\n            && (this.__lastUp.timestamp - event.timestamp) <= this._doubleTapThreshold\r\n        ){\r\n            event.setType(Event.EVENT_TYPES.DOUBLE)\r\n            found = true\r\n        }\r\n        \r\n        // next we check for LONG tap\r\n        if(!found && this.__lastDown && (Geometry.distanceToPoint(this.__lastDown, event) < this._tapDistanceThreshold)){\r\n            let lastDownDiff = event.timestamp - this.__lastDown.timestamp\r\n            if(lastDownDiff <= this._tapThreshold){\r\n                event.setType(Event.EVENT_TYPES.TAP)\r\n                found = true\r\n            }else if(lastDownDiff <= this._longTapCancel){\r\n                event.setType(Event.EVENT_TYPES.LONG)\r\n                found = true\r\n            }else{\r\n                // do nothing, we're cancelling the long click\r\n            }\r\n        }\r\n        \r\n        // at this point, it must be the end of a move, so we give it a default\r\n        if(!found){\r\n            event.setType(Event.EVENT_TYPES.UP)\r\n        }\r\n        \r\n        event.linkEvent(this.__lastDown)\r\n        this.__lastUp = event\r\n        this.__fireEvent(event)\r\n        this.__isDown = false\r\n    }\r\n    _handleMove (evt){\r\n        if( !this.isTracking()){\r\n            return\r\n        }\r\n        \r\n        let event = this.__formatTouchEvent(evt)\r\n        if(!event){\r\n            return\r\n        }\r\n        \r\n        if( this.__lastDown &&\r\n            ( (event.timestamp - this.__lastDown.timestamp) <= this._longTapCancel)\r\n            &&\r\n            (Geometry.distanceToPoint(this.__lastDown, event) < this._tapDistanceThreshold)\r\n        ){\r\n            // if they haven't moved their finger enough and we're within the longtap threshold\r\n            return\r\n        }\r\n            \r\n        event.setType(Event.EVENT_TYPES.MOVE)\r\n        event.linkEvent(this.__lastMove)\r\n        this.__lastMove = event\r\n        this.__fireEvent(event)\r\n        \r\n    }\r\n    /*\r\n     * This function takes an IO Event and fires it to all bound listeners of its type\r\n     */\r\n    __fireEvent (event){\r\n        let handlers = this.__getListenersByType(event.getType())\r\n        if(handlers.length){\r\n            for(let i=0; i<handlers.length; i++){\r\n                handlers[i].callback(event)\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     * This function will be used to queue previous events to  store a history rather than just\r\n     * the last one (lastMove, lastUp, lastDown)\r\n     */\r\n    __queueHistory (group,event){\r\n        group[0] = group[0].toUpperCase()\r\n        this['__last'+group].push(event)\r\n        this['__last'+group].shift()\r\n        return null\r\n    }\r\n    \r\n    /*\r\n     * This function might be uneeded? It basically adds all listeners to an array so we can\r\n     * potentially more easily track them (by key)\r\n     */\r\n    __formatListener (callback){\r\n        return {\r\n            key : ++this.__key\r\n            ,callback : callback\r\n        }\r\n    }\r\n    /*\r\n     * WARNING: A bit of reflection here. Be careful...\r\n     * This function returns all bound listeners based on type\r\n     */\r\n    __getListenersByType (type){\r\n        if(!type){\r\n            return null\r\n        }\r\n        let prop = '__'+type+'Listeners'\r\n        if(!this[prop]){\r\n            this[prop] = []\r\n        }\r\n        return this[prop]\r\n    }\r\n    \r\n    /*\r\n     * This function is used to bind a handler to a certain type of IO event\r\n     */\r\n    __on (type,callback){\r\n        let array = this.__getListenersByType(type)\r\n        array.push(this.__formatListener(callback))\r\n    }\r\n    /*\r\n     * This function removes a passed binding\r\n     */\r\n    __off (type,callback){\r\n        let array = this.__getListenersByType(type)\r\n        for(let i=0; i<array.length; i++){\r\n            if(array[i].callback === callback){\r\n                delete array[i]\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n     * The following are helper functions to make calling __on and __off more semantic\r\n     */\r\n    onDouble (callback){\r\n        this.__on(Event.EVENT_TYPES.DOUBLE,callback)\r\n    }\r\n    offDouble (callback){\r\n        this.__off(Event.EVENT_TYPES.DOUBLE,callback)\r\n    }\r\n    onLong (callback){\r\n        this.__on(Event.EVENT_TYPES.LONG,callback)\r\n    }\r\n    offLong (callback){\r\n        this.__off(Event.EVENT_TYPES.LONG,callback)\r\n    }\r\n    \r\n    onTap (callback){\r\n        this.__on(Event.EVENT_TYPES.TAP,callback)\r\n    }\r\n    offTap (callback){\r\n        this.__off(Event.EVENT_TYPES.TAP,callback)\r\n    }\r\n    \r\n    onDown (callback){\r\n        this.__on(Event.EVENT_TYPES.DOWN,callback)\r\n    }\r\n    offDown (callback){\r\n        this.__off(Event.EVENT_TYPES.DOWN,callback)\r\n    }\r\n    \r\n    onMove (callback){\r\n        this.__on(Event.EVENT_TYPES.MOVE,callback)\r\n    }\r\n    offMove (callback){\r\n        this.__off(Event.EVENT_TYPES.MOVE,callback)\r\n    }\r\n    \r\n    onUp (callback){\r\n        this.__on(Event.EVENT_TYPES.UP,callback)\r\n    }\r\n    offUp (callback){\r\n        this.__off(Event.EVENT_TYPES.UP,callback)\r\n    }\r\n    \r\n    /*\r\n     * This function can determine if this touch instance is being actively engaged\r\n     */\r\n    isDown (){\r\n        return this.__isDown\r\n    }\r\n\r\n    setIsTracking (status) {\r\n        this.__isTracking = status\r\n    }\r\n\r\n    isTracking () {\r\n        return this.__isTracking\r\n    }\r\n\r\n    /*\r\n     * This function takes a browser event (mouse or touch) and converts it into a TwoCylinder IO event\r\n     * IFF it registered a collision with this touch space else it returns false\r\n     */\r\n    __formatTouchEvent (evt){\r\n        //TODO: I'm not sure if this.collides will work for views that are not origin_x = 0, origin_y = 0\r\n        // BECAUSE, I think the event's x and y is relative to the device and the touch instance is relative\r\n        // to the world view (I THINK)\r\n\r\n        // changed Touches is used for multitouch... ?\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches\r\n\r\n        let touches = evt.changedTouches ? evt.changedTouches : []\r\n\r\n        if(touches.length){\r\n            let event = false\r\n            let step = 0\r\n\r\n            do{\r\n                if(step < touches.length){\r\n                    evt.clientX = touches[step].clientX\r\n                    evt.clientY = touches[step].clientY\r\n                }else{\r\n                    return false\r\n                }\r\n                event = new Event(evt,this.__view)\r\n                step++\r\n            }while(!this.collides(event.getWorldCenter()))\r\n        }else{\r\n            event = new Event(evt,this.__view)\r\n            if(!this.collides(event.getWorldCenter())){\r\n                return false\r\n            }\r\n        }\r\n\r\n        return event\r\n    }\r\n}\r\n\r\nmodule.exports = Touch\r\n","/*\r\n    This script handles drawing the joystick appearance\r\n*/\r\n\r\nconst Appearance = require('../engine/appearance')\r\nconst BoundingCircle = require('../engine/bounding/bounding_circle')\r\n\r\nclass Joystick extends Appearance {\r\n    constructor (){\r\n        let options = {\r\n            bounding : new BoundingCircle({\r\n                x : 0\r\n                ,y : 0\r\n                ,radius : 20\r\n            })\r\n        }\r\n        \r\n        super(options)\r\n    }\r\n    draw (canvas,x,y,rotation,scale,joystick){\r\n        let options = joystick.getDrawOptions()\r\n        let context = canvas.getContext('2d')\r\n        \r\n        // if the joystick is being operated, we draw the binding circle\r\n        if(options.operating){\r\n            context.beginPath()\r\n            context.arc(x, y, 160, 0, 2 * Math.PI, false)\r\n            context.fillStyle = 'rgba(0,255,0,0.1)'\r\n            context.fill()\r\n            context.lineWidth = 3\r\n            context.strokeStyle = 'rgba(0,255,0,0.3)'\r\n            context.stroke()\r\n        }\r\n        \r\n        context.beginPath()\r\n        context.arc(x, y, 20, 0, 2 * Math.PI, false)\r\n        context.fillStyle = '#000000'\r\n        context.fill()\r\n        context.lineWidth = 5\r\n        context.strokeStyle = '#303030'\r\n        context.stroke()\r\n        \r\n        context.beginPath()\r\n        context.lineWidth = 18\r\n        context.strokeStyle = '#333333'\r\n        context.lineCap = 'round'\r\n        context.moveTo(options.stick.x, options.stick.y)\r\n        context.lineTo(x, y)\r\n        context.stroke()\r\n        \r\n        context.beginPath()\r\n        context.arc(options.stick.x, options.stick.y, 18, 0, 2 * Math.PI, false)\r\n        context.fillStyle = '#dd2222'\r\n        context.fill()\r\n        context.lineWidth = 5\r\n        context.strokeStyle = '#aa1111'\r\n        context.stroke()\r\n        \r\n        context.beginPath()\r\n        context.arc(options.stick.x + 6, options.stick.y - 6, 4, 0, 2 * Math.PI, false)\r\n        context.fillStyle = '#ffcccc'\r\n        context.fill()\r\n    }\r\n}\r\n\r\nmodule.exports = Joystick","const Bounding = require('./engine/bounding/bounding')\r\nconst BoundingPoint = require('./engine/bounding/bounding_point')\r\nconst BoundingCircle = require('./engine/bounding/bounding_circle')\r\nconst BoundingBox = require('./engine/bounding/bounding_box')\r\n\r\nconst Appearance = require('./engine/appearance')\r\nconst Background = require('./engine/background')\r\nconst Controller = require('./engine/controller')\r\nconst Entity = require('./engine/entity')\r\nconst Game = require('./engine/game')\r\nconst Generic = require('./engine/generic')\r\nconst Particle = require('./engine/particle')\r\nconst ParticleEmitter = require('./engine/particle_emitter')\r\nconst Root = require('./engine/root')\r\nconst Vector = require('./engine/vector')\r\nconst View = require('./engine/view')\r\nconst World = require('./engine/world')\r\n\r\nlet EngineContainer = {\r\n    Bounding,\r\n    BoundingBox,\r\n    BoundingCircle,\r\n    BoundingPoint,\r\n    Appearance,\r\n    Controller,\r\n    Background,\r\n    Entity,\r\n    Game,\r\n    Generic,\r\n    ParticleEmitter,\r\n    Particle,\r\n    Root,\r\n    World,\r\n    View,\r\n    Vector\r\n}\r\n\r\nconst {\r\n    Functions,\r\n    Geometry,\r\n    Constants\r\n} = require('./engine/utilities')\r\n\r\nlet UtilitiesContainer = {\r\n    Functions,\r\n    Constants,\r\n    Geometry,\r\n}\r\n\r\nconst Event = require('./io/event')\r\nconst Touch = require('./io/touch')\r\nconst Joystick = require('./io/joystick')\r\n\r\nlet IOContainer = {\r\n    Event,\r\n    Touch,\r\n    Joystick\r\n}\r\n\r\n\r\nconst JoystickSprite = require('./sprites/joystick')\r\nlet SpritesContainer = {\r\n    Josystick: JoystickSprite\r\n}\r\n\r\nTwoCylinder = {\r\n    Engine: EngineContainer,\r\n    IO: IOContainer,\r\n    Sprites: SpritesContainer,\r\n    Utilities: UtilitiesContainer\r\n};\r\n\r\nmodule.exports = TwoCylinder","const Root = require('./root')\r\n\r\nclass Controller extends Root {\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        this.__world = undefined;\r\n    }\r\n\r\n    setWorld (world) {\r\n        this.__world = world\r\n    }\r\n\r\n    getWorld() {\r\n        return this.__world\r\n    }\r\n\r\n    preStep (worldClock){\r\n        return\r\n    }\r\n    step (worldClock){\r\n        return\r\n    }\r\n    postStep (worldClock){\r\n        return\r\n    }\r\n}\r\n\r\nmodule.exports = Controller","const Generic = require('./generic')\r\nconst Appearance = require('./appearance')\r\nconst Vector = require('./vector')\r\nconst BoundingPoint = require('./bounding/bounding_point')\r\n\r\nclass Entity extends Generic {\r\n    constructor (options){\r\n        super(options)\r\n\r\n        // -------------------------------\r\n        this.__appearance = null\r\n\r\n        options = Object.assign({\r\n            velocity : null // Vector :: the instance's velocity vector\r\n            ,rotation : 0 // float :: the instance's this.__appearance rotation\r\n            ,rotation_lag : 20 // int :: the number of steps it will take to turnTowards a target direction\r\n        }, options)\r\n\r\n        if(options.appearance){\r\n            this.setAppearance(options.appearance)\r\n        }\r\n\r\n        this._velocity = options.velocity\r\n        this._rotationLag = options.rotation_lag\r\n        this._rotation = options.rotation\r\n        this._collisionGroup = 'ENTITY'\r\n\r\n        // -------------------------------\r\n\r\n        // id is set by the world when it's inserted\r\n        this.__id = undefined\r\n        this.__world = undefined\r\n        this.__collisionGroupListening = {}\r\n\r\n        this.__visible = true;           // boolean  :: is this instance visible\r\n    }\r\n\r\n    // draw is called by a view.\r\n    // the view passes a callback function which is called IFF this instance is to be drawn\r\n    // passed to that function is important information that will be forwarded to the Instance's this.__appearance\r\n    draw (view, center_x, center_y) {\r\n        this.getAppearance().draw(\r\n            view.getCanvas(),\r\n            center_x,\r\n            center_y,\r\n            this\r\n        )\r\n    }\r\n    preStep (worldClock){\r\n        return\r\n    }\r\n    step (worldClock){\r\n        if(this.getSpeed()){\r\n            this.getBounding().setCenter({\r\n                x : this.getBounding().getCenter().x + this.getSpeed() * Math.cos(this.getDirection())\r\n                ,y : this.getBounding().getCenter().y + this.getSpeed() * Math.sin(this.getDirection())\r\n            })\r\n\r\n            if(this.getAppearance()){\r\n                this.getAppearance().getBounding().setCenter(this.getBounding().getCenter())\r\n            }\r\n        }\r\n    }\r\n    postStep (worldClock){\r\n        return\r\n    }\r\n    /****************************************************************************\r\n     COLLISIONS AND COLLISION CHECKING\r\n     ****************************************************************************/\r\n\r\n    // this will return what collision group this entity belongs to\r\n    getCollisionGroup (){\r\n        return this._collisionGroup\r\n    }\r\n\r\n    getCollidableGroups (){\r\n        return Object.keys(this.__collisionGroupListening)\r\n    }\r\n\r\n    // this function passes an other instance and signifies a collision has occurred\r\n    // this instance then determines if it should react to the collision or not\r\n    handleCollidedWith (other){\r\n        let collisionFunction = this.objectIsCollidable(other)\r\n        if(collisionFunction){\r\n            collisionFunction.apply(this,[other])\r\n        }\r\n    }\r\n\r\n    groupIsCollidable (group){\r\n        let retVal = false\r\n        if(this.__collisionGroupListening[other]){\r\n            retVal = this.__collisionGroupListening[other]\r\n        }\r\n        return retVal\r\n    }\r\n\r\n    // this function will return the collision function for a passed Entity instance\r\n    // or false IFF there is no corresponding collision function\r\n    objectIsCollidable (other){\r\n        let retVal = false\r\n\r\n        if (other instanceof Entity) {\r\n            return this.groupIsCollidable(other.getCollisionGroup())\r\n        }\r\n\r\n        return retVal\r\n    }\r\n\r\n    // this will return true IFF this object is listening for collisions\r\n    hasCollisionChecking (){\r\n        return this.__collisionGroupListening.hasOwnProperty\r\n    }\r\n\r\n    // ----------------------\r\n\r\n    // this collision function handles collisions between this instance and instances of a specified Group\r\n    onCollideGroup (group, callback){\r\n        this.__collisionGroupListening[group] = callback\r\n    }\r\n\r\n    offCollideGroup (group){\r\n        delete this.__collisionGroupListening[group]\r\n    }\r\n\r\n    /****************************************************************************\r\n     GETERS AND SETTERS\r\n     ****************************************************************************/\r\n\r\n    getPosition (){\r\n        return this.getBounding().getCenter()\r\n    }\r\n\r\n    /**\r\n     * tuple can either be a boundingPoint, tuple (x & y) or just x (in which case y is y)\r\n     */\r\n    setPosition (tuple, y){\r\n        if(tuple instanceof BoundingPoint){\r\n            this.getBounding().setCenter(tuple.getCenter())\r\n        }else if(typeof tuple === 'object'){\r\n            this.getBounding().setCenter({x:tuple.x, y:tuple.y})\r\n        }else{\r\n            this.getBounding().setCenter({x:tuple, y:y})\r\n        }\r\n    }\r\n\r\n    // ----------------------\r\n\r\n    /**\r\n     * app is an Appearance object\r\n     * when setting an this.__appearance object, you can also change the collision box by passing new collision dimensions\r\n     * \"box\" can either be a tuple (width & height) or just width in which case h is height\r\n     */\r\n    setAppearance (app){\r\n        if (!(app instanceof Appearance)) {\r\n            throw \"Appearance must be a instance of Appearance\"\r\n        }\r\n        this.__appearance = app\r\n    }\r\n\r\n    // This function defines how to draw this instance\r\n    getAppearance (){\r\n        return this.__appearance\r\n    }\r\n\r\n    // ----------------------\r\n\r\n    getDirection (){\r\n        return this.getVelocity().getDirection()\r\n    }\r\n    rotateTowards (dir){\r\n        this.getVelocity().rotateTowards(dir, this._rotationLag)\r\n    }\r\n    setDirection (dir){\r\n        this.getVelocity().setDirection(dir)\r\n\r\n        return this.getDirection()\r\n    }\r\n\r\n    getSpeed (){\r\n        return this.getVelocity().getSpeed()\r\n    }\r\n\r\n    setSpeed (speed){\r\n        this.getVelocity().setSpeed(speed)\r\n    }\r\n\r\n    setVelocity (velocity) {\r\n        this._velocity = velocity\r\n    }\r\n    getVelocity () {\r\n        if (!this._velocity) {\r\n            this._velocity = new Vector()\r\n        }\r\n        return this._velocity\r\n    }\r\n\r\n    // ----------------------\r\n\r\n    getVisible (){\r\n        return this.isVisible()\r\n    }\r\n\r\n    isVisible (){\r\n        // must be in the world, visible, and with an appearance\r\n        return this.__id && this.__visible && !!this.__appearance\r\n    }\r\n\r\n    setVisible (vis){\r\n        this.__visible =  vis\r\n    }\r\n\r\n    setWorld(world) {\r\n        this.__world = world\r\n    }\r\n\r\n    getWorld() {\r\n        return this.__world\r\n    }\r\n}\r\n\r\nmodule.exports = Entity","const Root = require('./root')\r\n\r\nclass Game extends Root {\r\n    constructor() {\r\n        super()\r\n        this.__world = undefined;\r\n    }\r\n\r\n    start() {\r\n        return this.getWorld().start();\r\n    }\r\n\r\n    exit() {\r\n        return this.getWorld().exit();\r\n    }\r\n\r\n    setWorld(w) {\r\n        this.__world = w;\r\n    }\r\n\r\n    getWorld() {\r\n        return this.__world;\r\n    }\r\n}\r\n\r\nmodule.exports = Game","/*\r\n This script defines the particle object\r\n */\r\nconst Root = require('./root')\r\n\r\n\r\nclass Particle extends Root {\r\n    constructor(options) {\r\n        super(options)\r\n        options = Object.assign({}, options)\r\n        this.__id = options.id\r\n        this.__emitter = options.emitter\r\n    }\r\n    // This function is responsible for moving the particle or otherwise tracking its lifecycle\r\n    step (clock) {\r\n        return null\r\n    }\r\n    draw (canvas,x,y,rotation,scale,emitter){\r\n        let context = canvas.getContext('2d')\r\n        context.beginPath()\r\n        context.arc(x, y, 20, 0, 2 * Math.PI, false)\r\n        context.fillStyle = 'grey'\r\n        context.fill()\r\n        context.lineWidth = 5\r\n        context.strokeStyle = '#333333'\r\n        context.stroke()\r\n    }\r\n    destroy () {\r\n        this.__emitter.removeParticle(this)\r\n    }\r\n}\r\n\r\nmodule.exports = Particle\r\n","const Functions = require('./utilities').Functions\r\nconst Generic = require('./generic')\r\n\r\nclass ParticleEmitter extends Generic {\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        // -------------------------------\r\n        this.__particles = []\r\n        this.__toRemove = []\r\n\r\n        // by default, newly created emitters do not emit until told to\r\n        this.__isEmitting = false\r\n\r\n        // an internal id counter\r\n        this.__particleKey = 0\r\n\r\n        // id is set by the world when it's inserted\r\n        this.__id = null\r\n    }\r\n    // an emitter drawing basically just calls draw on all its particles\r\n    // particles are like appearances, but without bounding boxes - they just get drawn if the emitter is in\r\n    // collision with the view\r\n    draw (view, center_x, center_y){\r\n        this.getParticles().forEach((p) => {\r\n            p.draw(view.getCanvas(),\r\n                center_x,\r\n                center_y,\r\n                this)\r\n        })\r\n    }\r\n    step (clock) {\r\n        this.getParticles().forEach((p) => {\r\n            p.step(clock)\r\n        })\r\n\r\n        this.__removeParticles()\r\n    }\r\n    destroy () {\r\n        this.__particles = []\r\n    }\r\n    setIsEmitting(isEmitting) {\r\n        this.__isEmitting = isEmitting\r\n    }\r\n    getIsEmitting() {\r\n        return this.__isEmitting\r\n    }\r\n\r\n    /****************************************************************************\r\n     PARTICLES\r\n     ****************************************************************************/\r\n    getParticles () {\r\n        return this.__particles\r\n    }\r\n    removeParticle (particle) {\r\n        this.__toRemove.push(particle)\r\n    }\r\n\r\n    __removeParticles (particle) {\r\n        Functions.disjoinArray2FromArray1(this.__particles, this.__toRemove)\r\n        this.__toRemove = []\r\n    }\r\n    /**\r\n     * It may be advantageous for particle emitters to emit particles one at a time\r\n     * rather than repeatedly. In that case, this function can be used\r\n     * @param {function} particleType\r\n     * @param {object} options\r\n     */\r\n    emitParticle(particleType, options) {\r\n        let newParticle\r\n\r\n        options = Object.assign({\r\n            id : ++this.__particleKey,\r\n            emitter : this\r\n        }, options)\r\n        newParticle = new particleType(options)\r\n        this.__particles.push(newParticle)\r\n\r\n        return newParticle\r\n    }\r\n}\r\n\r\nmodule.exports = ParticleEmitter","/*\r\n    This script defines a this.__world's view.\r\n    Views are attached to this.__worlds and help determine which instances should be drawn to the this.__canvas and where\r\n*/\r\n\r\nconst Generic = require('./generic')\r\nconst Functions = require('./utilities').Functions\r\n\r\nclass View extends Generic {\r\n    constructor (options){\r\n        super(options)\r\n        this.__canvas = options.canvas\r\n        this.__world = undefined;\r\n        \r\n        this._resolution = options.resolution || 1\r\n        \r\n        this.__canvas.width = this.getBounding().width\r\n        this.__canvas.height = this.getBounding().height\r\n        this.__canvas.style.width = (this.getBounding().width * this._resolution) + \"px\"\r\n        this.__canvas.style.height = (this.getBounding().height * this._resolution) + \"px\"\r\n        \r\n        this.__followInstance = false\r\n        \r\n        this.__ios = []\r\n        this.__toRemoveIOs = []\r\n        this.__ioKey = 0\r\n\r\n        // id is set by the world when it's inserted\r\n        this.__id = null\r\n    }\r\n    clearCanvas (){\r\n        this.__canvas.getContext('2d').clearRect(0,0,this.__canvas.width,this.__canvas.height)\r\n    }\r\n    draw (time){\r\n        // before we draw, we want to re-center on our tracked instance if we have one\r\n        if(this.__followInstance){\r\n            this.getBounding().setCenterWithinBounding(\r\n                this.__followInstance.getBounding().getCenter()\r\n                , this.__world.getBounding()\r\n            )\r\n        }\r\n        \r\n        // prepare to draw\r\n        this.clearCanvas()\r\n        \r\n        // first draw the world's background\r\n        this.__world.getBackground().draw(this)\r\n        \r\n        // get all instances and loop through them\r\n        this.__world.getInstances().forEach((inst) => {\r\n            // skip invisible instances\r\n            if(!inst.isVisible()){\r\n                return\r\n            }\r\n            // if this instance's appearance is inside this view box\r\n            // NOTE: we check the appearance's bounding because it may be desirable for the calculated collision box\r\n            // to be different from what is considered visible. for example, if the appearance draws shadows\r\n            // those shadows might not be collidable with other entities, but should be included in\r\n            // determining whether or not to draw the entity to a view.\r\n            if( this.collides( inst.getAppearance().getBounding() ) ){\r\n                //then we draw the instance and pass the view so it can reference the view's\r\n                //transitions and transformation (rotation, scale, etc)\r\n                inst.draw(\r\n                    this\r\n                    ,inst.getBounding().getCenter().x - this.getBounding().getContainingRectangle().origin_x\r\n                    ,inst.getBounding().getCenter().y - this.getBounding().getContainingRectangle().origin_y\r\n                )\r\n            }\r\n        })\r\n\r\n        // Draw each particle emitter\r\n        this.__world.getParticleEmitters().forEach((part) => {\r\n            if (this.collides(part.getBounding())) {\r\n                part.draw(\r\n                    this,\r\n                    part.getBounding().getCenter().x - this.getBounding().getContainingRectangle().origin_x,\r\n                    part.getBounding().getCenter().y - this.getBounding().getContainingRectangle().origin_y\r\n                )\r\n            }\r\n        })\r\n\r\n        // check if any IOs have been removed\r\n        // TODO: Doesn't really make sense here? Should we have a pre-draw function?\r\n        this.__removeIOs()\r\n\r\n        //now we loop through the IO handlers for this view\r\n        this.getIOs().forEach((io) => {\r\n            io.draw()\r\n        })\r\n    }\r\n/****************************************************************************\r\nGETTER AND SETTER FUNCTIONS\r\n****************************************************************************/\r\n    getCanvas (){\r\n        return this.__canvas\r\n    }\r\n    getWorld (){\r\n        return this.__world\r\n    }\r\n    setWorld (world){\r\n        this.__world = world\r\n    }\r\n    getResolution (){\r\n        return this._resolution\r\n    }\r\n/****************************************************************************\r\nIO FUNCTIONS\r\n****************************************************************************/    \r\n    removeIO (io){\r\n        if(io.__id){\r\n            this.__toRemoveIOs.push(io)\r\n        }\r\n        \r\n        return io\r\n    }\r\n    __removeIOs () {\r\n        Functions.disjoinArray2FromArray1(this.__ios, this.__toRemoveIOs)\r\n\r\n        this.__toRemoveIOs = []\r\n    }\r\n    addIO(io){\r\n        if(io.__id){\r\n            throw \"IO already added\"\r\n        }\r\n        io.__id = ++this.__ioKey\r\n\r\n        this.__ios.push(io)\r\n       \r\n        return io\r\n    }\r\n   \r\n    getIOs() {\r\n        return this.__ios\r\n    }\r\n    \r\n    // this gets the mouse position by world, view, and device OR any one of them as an x,y tuple\r\n    getMousePosition (evt) {\r\n        return new TwoCylinder.IO.Event(evt, this)\r\n    }\r\n    \r\n    followInstance (instance){\r\n        if(instance){\r\n            this.__followInstance = instance\r\n        } else {\r\n            this.__followInstance = false\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = View","const Generic = require('./generic')\r\nconst Background = require('./background')\r\nconst BoundingBox = require('./bounding/bounding_box')\r\nconst Functions = require('./utilities').Functions\r\n\r\nclass World extends Generic {\r\n    constructor (options) {\r\n        options.bounding = new BoundingBox({\r\n            origin_x : 0\r\n            ,origin_y : 0\r\n            ,width : options.width\r\n            ,height : options.height\r\n        })\r\n        super(options)\r\n        this._fps = options.fps || 30\r\n\r\n        this.__instances = []\r\n        this.__particleEmitters = []\r\n        this.__controllers = []\r\n        this.__views = []\r\n\r\n        this.__toRemoveParticleEmitters = []\r\n        this.__toRemoveInstances = []\r\n        this.__toRemoveControllers = []\r\n        this.__toRemoveViews = []\r\n\r\n        this.__collisionGroups = {}\r\n        this.__background = options.background || new Background()\r\n\r\n        this.__instanceKey = 0\r\n        this.__viewKey = 0\r\n        this.__emitterKey = 0\r\n        this.__controllerKey = 0\r\n        this.__clock = 0\r\n    }\r\n\r\n    //TODO: Needs to somehow sync touch events up with the game clock\r\n    start (){\r\n        this.__intervalId = setInterval(() => {\r\n            try{\r\n                this.loop.apply(this, [])\r\n            } catch (e) {\r\n                this.exit(e)\r\n            }\r\n        }, 1000 / this._fps)\r\n    }\r\n\r\n    __preStep (time){\r\n        // we have each instance perform a frame step.\r\n        this.__instances.forEach((inst) => {\r\n            inst.preStep(time)\r\n        })\r\n\r\n        // we have each instance perform a frame step.\r\n        this.__controllers.forEach((cont) => {\r\n            cont.preStep(time)\r\n        })\r\n    }\r\n\r\n    __postStep (time){\r\n        // we have each instance perform a frame step.\r\n        this.__instances.forEach((inst) => {\r\n            inst.postStep(time)\r\n        })\r\n\r\n        // we have each instance perform a frame step.\r\n        this.__controllers.forEach((cont) => {\r\n            cont.postStep(time)\r\n        })\r\n\r\n        this.__removeControllers()\r\n        this.__removeParticleEmitters()\r\n        this.__removeViews()\r\n        this.__removeInstances()\r\n    }\r\n\r\n    loop (){\r\n        this.__preStep(++this.__clock)\r\n\r\n        // we have each instance perform a frame step.\r\n        this.__controllers.forEach((cont) => {\r\n            cont.step(this.__clock)\r\n        })\r\n\r\n        // we have each instance perform a frame step.\r\n        this.__particleEmitters.forEach((part) => {\r\n            part.step(this.__clock)\r\n        })\r\n\r\n        // we have each instance perform a frame step.\r\n        this.__instances.forEach((inst) => {\r\n            inst.step(this.__clock)\r\n        })\r\n\r\n        // check for collisions\r\n        this.__instances.forEach((me) => {\r\n            if (me.hasCollisionChecking()) {\r\n                let myCollisionGroups = me.getCollidableGroups()\r\n                myCollisionGroups.forEach((group) => {\r\n                    // if there are instances that match the groups im listening for\r\n                    if (this.__collisionGroups[group] && this.__collisionGroups[group].length) {\r\n\r\n                        // for each of those matching instance types,\r\n                        this.__collisionGroups[group].forEach( (other) => {\r\n\r\n                            // if they're not me, and I collide with them\r\n                            if (me.__id !== other.__id && me.collides(other.getBounding())) {\r\n                                me.handleCollidedWith(other)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        // draw the views\r\n        this.__views.forEach((view) => {\r\n            view.draw(this.__clock)\r\n        })\r\n\r\n        this.__postStep(this.__clock)\r\n    }\r\n\r\n    exit (){\r\n        clearInterval(this.__intervalId)\r\n\r\n        //TODO: handle exit\r\n    }\r\n\r\n    /****************************************************************************\r\n     INSTANCE FUNCTIONS\r\n     ****************************************************************************/\r\n    removeInstance (instance){\r\n        if(instance.__id){\r\n            // we add their id to the array of instances to remove\r\n            this.__toRemoveInstances.push(instance)\r\n        }\r\n        return instance\r\n    }\r\n    __removeInstances () {\r\n        if (!this.__toRemoveInstances.length) {\r\n            return\r\n        }\r\n        Functions.disjoinArray2FromArray1(this.__instances, this.__toRemoveInstances, (inst) => {\r\n            this.__removeFromCollisionGroup(inst)\r\n            inst.setWorld(null)\r\n        })\r\n        this.__toRemoveInstances = []\r\n    }\r\n\r\n    addInstance (instance){\r\n        if(instance.__id){\r\n            throw \"Instance already added\"\r\n        }\r\n        instance.__id = ++this.__instanceKey\r\n        instance.setWorld(this)\r\n        // add it to the big list\r\n        this.__instances.push(instance)\r\n        // also add it according to its collision group\r\n        this.__addToCollisionGroup(instance)\r\n\r\n        return instance\r\n    }\r\n\r\n    getInstances (){\r\n        return this.__instances\r\n    }\r\n\r\n    removeAllInstances () {\r\n        this.getInstances().forEach((inst) => {\r\n            this.removeInstance(inst)\r\n        })\r\n    }\r\n\r\n    /****************************************************************************\r\n     VIEW FUNCTIONS\r\n     ****************************************************************************/\r\n    addView (view){\r\n        if (view.__id) {\r\n            throw \"View already added\"\r\n        }\r\n        view.__id = ++this.__viewKey\r\n        view.setWorld(this)\r\n        this.__views.push(view)\r\n\r\n        return view\r\n    }\r\n\r\n    getViews (){\r\n        return this.__views\r\n    }\r\n\r\n    __removeViews () {\r\n        if (!this.__toRemoveViews.length) {\r\n            return\r\n        }\r\n        Functions.disjoinArray2FromArray1(this.__views, this.__toRemoveViews, (v) => {v.setWorld(null)})\r\n\r\n        this.__toRemoveViews = []\r\n    }\r\n\r\n    removeView (view){\r\n        if(view.__id) {\r\n            // we add them to the array of views to remove\r\n            this.__toRemoveViews.push(view)\r\n        }\r\n        return view\r\n    }\r\n\r\n    /****************************************************************************\r\n     PARTICLE FUNCTIONS\r\n     ****************************************************************************/\r\n    addParticleEmitter (emitter){\r\n        if (emitter.__id){\r\n            throw \"Emitter already added\"\r\n        }\r\n        emitter.__id = ++this.__emitterKey\r\n        this.__particleEmitters.push(emitter)\r\n        return emitter\r\n    }\r\n\r\n    removeParticleEmitter (emitter){\r\n        if (emitter.__id) {\r\n            // we add their id to the array of emitters to remove\r\n            this.__toRemoveParticleEmitters.push(emitter)\r\n        }\r\n        return emitter\r\n    }\r\n    __removeParticleEmitters (){\r\n        if (!this.__toRemoveParticleEmitters.length) {\r\n            return\r\n        }\r\n        Functions.disjoinArray2FromArray1(this.__particleEmitters, this.__toRemoveParticleEmitters)\r\n\r\n        this.__toRemoveParticleEmitters = []\r\n    }\r\n    getParticleEmitters () {\r\n        return this.__particleEmitters\r\n    }\r\n\r\n    removeAllParticleEmitters () {\r\n        this.getParticleEmitters().forEach((emitter) => {\r\n            this.removeParticleEmitter(emitter)\r\n        })\r\n    }\r\n\r\n    /****************************************************************************\r\n     PARTICLE FUNCTIONS\r\n     ****************************************************************************/\r\n    addController (controller){\r\n        if (controller.__id){\r\n            throw \"Emitter already added\"\r\n        }\r\n        controller.__id = ++this.__controllerKey\r\n        controller.setWorld(this)\r\n        this.__controllers.push(controller)\r\n        return controller\r\n    }\r\n\r\n    removeController (controller){\r\n        if (controller.__id) {\r\n            // we add their id to the array of emitters to remove\r\n            this.__toRemoveControllers.push(controller)\r\n        }\r\n        return controller\r\n    }\r\n    __removeControllers (){\r\n        if (!this.__toRemoveControllers.length) {\r\n            return\r\n        }\r\n        Functions.disjoinArray2FromArray1(this.__controllers, this.__toRemoveControllers, (c) => {c.setWorld(null)})\r\n\r\n        this.__toRemoveControllers = []\r\n    }\r\n    getControllers () {\r\n        return this.__controllers\r\n    }\r\n\r\n    /****************************************************************************\r\n     BACKGROUND FUNCTIONS\r\n     ****************************************************************************/\r\n    setBackground (background){\r\n        this.__background = background\r\n    }\r\n\r\n    getBackground (){\r\n        return this.__background\r\n    }\r\n    /****************************************************************************\r\n     HELPER FUNCTIONS\r\n     ****************************************************************************/\r\n    __addToCollisionGroup (instance){\r\n        let group = instance.getCollisionGroup()\r\n\r\n        if(!this.__collisionGroups[group]){\r\n            this.__collisionGroups[group] = []\r\n        }\r\n        this.__collisionGroups[group].push(instance)\r\n    }\r\n    __removeFromCollisionGroup (instance){\r\n        let i\r\n        let group = instance.getCollisionGroup()\r\n\r\n        if (!this.__collisionGroups[group]) {\r\n            throw \"Collision Group does not exist\"\r\n        }\r\n\r\n        for(i=0; i<this.__collisionGroups[group].length; i++){\r\n            if(this.__collisionGroups[group][i].__id === instance.__id){\r\n                this.__collisionGroups[group].splice(i,1)\r\n                break\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = World","/*\r\n    This script handles drawing the joystick appearance\r\n*/\r\n\r\nconst Touch = require('./touch')\r\nconst BoundingCircle = require('../engine/bounding/bounding_circle')\r\nconst {Geometry, Functions} = require('../engine/utilities')\r\nconst JoystickSprite = require('../sprites/joystick')\r\n\r\nclass Joystick extends Touch {\r\n    constructor (options){\r\n        let defaultRadius = 40\r\n        options.tap_distance = 0\r\n        options.bounding = new BoundingCircle({\r\n            x : options.x\r\n            ,y : options.y\r\n            ,radius : defaultRadius\r\n        })\r\n        super (options)\r\n        this._defaultRadius = defaultRadius\r\n\r\n        this.__isHeld = false\r\n        \r\n        this.__pullRatio = 1.8\r\n        \r\n        // the operate function is what we will pass joystick motions to\r\n        this.__operateFunction = null\r\n        \r\n        this.__appearance = new JoystickSprite()\r\n        \r\n        this._previousEvent = null\r\n        \r\n        this.onDown((evt) => {\r\n            this._previousEvent = evt; //initialize evt\r\n            \r\n            // we link to itself so that the joystick draws properly\r\n            this._previousEvent.linkEvent(evt)\r\n\r\n            this.getBounding().set({\r\n                radius : 4 * this._defaultRadius\r\n            })\r\n            \r\n            if(typeof this.__operateFunction === 'function'){\r\n                if (evt.velocity) {\r\n                    evt.velocity.setSpeed(0)\r\n                }\r\n                this.__operateFunction(evt)\r\n            }\r\n        })\r\n        \r\n        this.onUp((evt) => {\r\n            this.getBounding().set({\r\n                radius : this._defaultRadius\r\n            })\r\n            delete this._previousEvent\r\n            \r\n            if(typeof this.__operateFunction === 'function'){\r\n                if (evt.velocity) {\r\n                    evt.velocity.setSpeed(0)\r\n                }\r\n                this.__operateFunction(evt)\r\n            }\r\n        })\r\n        \r\n        this.onMove((evt) => {\r\n            if (this.isDown()){\r\n                evt.linkEvent(this.__lastDown)\r\n                if(typeof(this.__operateFunction) === 'function'){\r\n                    //want to make the max speed the distance we allow the joystick to move\r\n                    if (evt.velocity) {\r\n                        evt.velocity.setSpeed(Math.min(evt.velocity.getSpeed(), this._defaultRadius / this.__pullRatio))\r\n                    }\r\n                    this.__operateFunction(evt)\r\n                }\r\n                this._previousEvent = evt\r\n            }\r\n        })\r\n    }\r\n    onOperate (callback){\r\n        this.__operateFunction = callback\r\n    }\r\n    offOperate (){\r\n        delete this.__operateFunction; \r\n    }\r\n    getDrawOptions () {\r\n        let options = {\r\n            stick : this.getBounding().getCenter()\r\n            ,operating : this.isDown()\r\n        }\r\n        \r\n        if(this._previousEvent && this._previousEvent.velocity){\r\n            let vector = Functions.clone(this._previousEvent.velocity)\r\n            vector.setSpeed(Math.min(this._defaultRadius / this.__pullRatio, this._previousEvent.velocity.getSpeed()))\r\n            options.stick = Geometry.pointFromVector(options.stick, vector)\r\n        }\r\n        \r\n        return options\r\n    }\r\n}\r\n\r\nmodule.exports = Joystick","const TC = require('../../../../TwoCylinder/dist/twocylinder')\r\n\r\nclass Enemy extends TC.Engine.Entity {\r\n    static get healthMultiplier() { return 1 }\r\n    static get HP_CYAN() { return 'c' }\r\n    static get HP_MAGENTA() { return 'm' }\r\n    static get HP_YELLOW() { return 'y' }\r\n\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        this.setPosition(options.x, options.y)\r\n        this.__pixelValue = options.pixel\r\n        this.__pixelIndex = options.index\r\n\r\n        this.__health = getHealthFromRGBValues(this.__pixelValue, this.constructor.healthMultiplier)\r\n    }\r\n\r\n    getHP(color) {\r\n        if (!color) {\r\n            return this.__health\r\n        } else {\r\n            return this.__health[color]\r\n        }\r\n    }\r\n\r\n    getColorStyle() {\r\n        return 'rgb(' + this.__pixelValue[0] + ',' + this.__pixelValue[1] + ',' + this.__pixelValue[2] + ')'\r\n    }\r\n}\r\n\r\nfunction getHealthFromRGBValues(rgbArray, maximumValue) {\r\n    let ratio = maximumValue / 255\r\n    return {\r\n        c: maximumValue - Math.round(rgbArray[0] * ratio),\r\n        m: maximumValue - Math.round(rgbArray[1] * ratio),\r\n        y: maximumValue - Math.round(rgbArray[2] * ratio)\r\n    }\r\n}\r\n\r\nmodule.exports = Enemy\r\n","const TC = require('../../TwoCylinder/dist/twocylinder')\r\nconst GameSettings = require('./game_settings')\r\nconst LevelController = require('./game/level_controller')\r\nconst Player = require('./game/player')\r\nconst MouseControl = require('./game/io/mouseControl')\r\n\r\nlet canvas;\r\n\r\nconst STATE_MENU = 'menu'\r\nconst STATE_STORY = 'story'\r\nconst STATE_GAME = 'game'\r\n\r\nconst desiredWidth = 800\r\nconst desiredHeight = 1300\r\n\r\nclass OpaqueGame extends TC.Engine.Game {\r\n    init(window) {\r\n        canvas = window.document.getElementById('world')\r\n        this.gameSettings = new GameSettings()\r\n        // TODO: load the settings from session?\r\n\r\n        window.DEBUG = true;\r\n\r\n        this.enter(STATE_MENU)\r\n    }\r\n\r\n    enter(state) {\r\n        this.beforeChange()\r\n\r\n        switch (state) {\r\n            case STATE_MENU:\r\n                this.enterMenu()\r\n                break;\r\n            case STATE_GAME:\r\n                this.enterGame()\r\n                break;\r\n            case STATE_STORY:\r\n                this.enterStory()\r\n                break;\r\n        }\r\n\r\n        this.afterChange()\r\n    }\r\n\r\n    beforeChange() {\r\n        if (this.getWorld()) {\r\n            this.getWorld().exit()\r\n            this.setWorld(null)\r\n        }\r\n    }\r\n\r\n    afterChange() {\r\n        this.getWorld().start()\r\n    }\r\n\r\n    enterGame() {\r\n        let gameBackground = new TC.Engine.Background({\r\n            color: '#ffffff'\r\n        })\r\n\r\n        let world = new TC.Engine.World({\r\n            fps: 30,\r\n            width: desiredWidth,\r\n            height: desiredHeight,\r\n            background: gameBackground\r\n        })\r\n\r\n        let dimensions = getScreenDimensions()\r\n        let view = new TC.Engine.View({\r\n            canvas: canvas,\r\n            resolution: dimensions.scale,\r\n            bounding: world.getBounding()\r\n        })\r\n\r\n        world.addView(view)\r\n\r\n        // create our player\r\n        this.player = new Player({})\r\n        world.addInstance(this.player)\r\n\r\n        // create our levelController\r\n        this.levelController = new LevelController({world: world})\r\n        world.addController(this.levelController)\r\n\r\n        // create our hud\r\n\r\n        // create our IO\r\n        let mouseControl = new MouseControl({\r\n            view: view,\r\n            player: this.player\r\n        })\r\n\r\n        this.setWorld(world)\r\n    }\r\n\r\n    enterMenu() {\r\n        let menuBackground = new TC.Engine.Background({\r\n            color: '#77ff77'\r\n        })\r\n\r\n        let world = new TC.Engine.World({\r\n            fps: 30,\r\n            width: desiredWidth,\r\n            height: desiredHeight,\r\n            background: menuBackground\r\n        })\r\n\r\n        let dimensions = getScreenDimensions()\r\n        let view = new TC.Engine.View({\r\n            canvas: canvas,\r\n            resolution: dimensions.scale,\r\n            bounding: world.getBounding()\r\n        })\r\n\r\n        world.addView(view)\r\n\r\n        // TODO: create the items + io / buttons\r\n\r\n        this.setWorld(world)\r\n    }\r\n\r\n    enterStory() {\r\n        alert(\"DO THIS\")\r\n    }\r\n}\r\n\r\nfunction getScreenDimensions() {\r\n    // if our screen is thinner than the desired, we need to limit by width\r\n    if ( (desiredWidth / desiredHeight) > (window.innerWidth / window.innerHeight) ) {\r\n        let scale = (window.innerWidth / desiredWidth)\r\n        return {\r\n            width: window.innerWidth,\r\n            height: scale * desiredHeight,\r\n            scale: scale\r\n        }\r\n    } else {\r\n        // we limit by height\r\n        let scale = (window.innerHeight / desiredHeight)\r\n        return {\r\n            height: window.innerHeight,\r\n            width: scale * desiredWidth,\r\n            scale: scale\r\n        }\r\n    }\r\n}\r\n\r\nwindow.OpaqueGame = OpaqueGame","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","class GameSettings {\r\n    constructor() {\r\n        this.health = 100\r\n        this.imageSize = 128 // the height and width of every image\r\n        this.palette = 8 // basically types of enemies\r\n    }\r\n}\r\n\r\nmodule.exports = GameSettings","const TC = require('../../../TwoCylinder/dist/twocylinder')\r\nconst EnemyController = require('./enemy_controller')\r\nconst Level = require('./levels/level')\r\n\r\nconst PATH_TO_LEVEL_IMAGES = './src/game/levels/images/'\r\n\r\nclass LevelController extends TC.Engine.Controller {\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        this.currentLevel = options.currentLevel || -1 // we start at -1 so when we advance it starts at 0\r\n        this.levelIsActive = false\r\n        this.levelIsLoading = false\r\n        this.enemyController = null\r\n    }\r\n\r\n    preStep(worldClock) {\r\n        super.preStep(worldClock)\r\n\r\n        if (!this.levelIsActive && !this.levelIsLoading) {\r\n            this.advanceLevel()\r\n        }\r\n    }\r\n\r\n    step(worldClock) {\r\n        super.step(worldClock)\r\n    }\r\n\r\n    handleLevelEnd() {\r\n        console.log(\"LEVEL END\")\r\n        // TODO: what do we do about the score? We should show how much of the image they got done\r\n        this.enemyController.exit()\r\n        delete this.enemyController\r\n        delete this.level\r\n        this.levelIsActive = false\r\n    }\r\n\r\n    advanceLevel() {\r\n        this.currentLevel++\r\n\r\n        switch (this.currentLevel) {\r\n            case 0:\r\n                // we may want to make a custom enemy controller for certain levels\r\n            default:\r\n                let levelData = LEVELS[this.currentLevel]\r\n\r\n                let imgFile = new Image()\r\n\r\n                // load the image\r\n                imgFile.crossOrigin = \"Anonymous\"\r\n                imgFile.onload = () => {\r\n                    this.levelIsLoading = false\r\n                    levelData.image = imgFile\r\n                    this.level = new Level(levelData)\r\n                    this.enemyController = new EnemyController({\r\n                        level: this.level,\r\n                        onLevelEnd: this.handleLevelEnd\r\n                    })\r\n                    this.getWorld().addController(this.enemyController)\r\n                    this.levelIsActive = true\r\n                }\r\n                imgFile.src = PATH_TO_LEVEL_IMAGES + levelData.imageName\r\n                break;\r\n        }\r\n\r\n        this.levelIsLoading = true\r\n    }\r\n}\r\n\r\nconst LEVELS = [\r\n    {\r\n        name: 'Printer Test',\r\n        colorCount: 3,\r\n        imageName: 'cmy.png'\r\n    }\r\n]\r\n\r\nmodule.exports = LevelController","const TC = require('../../../TwoCylinder/dist/twocylinder')\r\nconst PixelEnemy = require('./enemies/pixel')\r\n\r\nconst ENEMY_CREATE_DELAY_CONSTANT = 90; // 3 seconds\r\n\r\nconst ENEMY_TYPE_PIXEL = 'pixel'\r\nconst ENEMY_TYPE_ADVANCED = 'advanced'\r\nconst ENEMY_TYPE_BOSS = 'boss'\r\n\r\nclass EnemyController extends TC.Engine.Controller {\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        this.levelInstance = options.level\r\n\r\n        this.digestLevelData()\r\n\r\n        // create a bunch of enemies from it (or representation of enemies\r\n        this.enemyCreationTimeout = undefined\r\n        this.diceSides = ENEMY_CREATE_DELAY_CONSTANT\r\n\r\n        this.onLevelEnd = options.onLevelEnd\r\n    }\r\n\r\n    step(worldClock) {\r\n        super.step(worldClock)\r\n        if (this.enemyCreationTimeout > 0) {\r\n            this.enemyCreationTimeout--;\r\n            return;\r\n        }\r\n        // roll a dice to determine if we should create an enemy / group of enemies\r\n        if (Math.floor(Math.random() * this.diceSides) === 0) {\r\n            // if we decide to create an enemy\r\n            let NUMBER_CREATED = 1 + Math.round(( 1 - (this.enemyQueue.length / this.startingQueueSize)) * this.levelInstance.getColorCount());\r\n\r\n            // create enemy\r\n            while (NUMBER_CREATED > 0) {\r\n                this.createEnemyInstanceFromEnemyData(this.enemyQueue.pop())\r\n                NUMBER_CREATED--\r\n            }\r\n\r\n            this.enemyCreationTimeout = ENEMY_CREATE_DELAY_CONSTANT * NUMBER_CREATED\r\n        }\r\n    }\r\n\r\n    postStep(worldClock) {\r\n        super.postStep(worldClock)\r\n    }\r\n\r\n    digestLevelData() {\r\n        this.enemyQueue = []\r\n        let colors = {}\r\n        let imageData = this.levelInstance.getImageData()\r\n        this.startingQueueSize = imageData.length\r\n        let advancedEnemyProportion = this.startingQueueSize / this.levelInstance.getColorCount()\r\n\r\n        imageData.forEach((pixel, i) => {\r\n            let colorKey = pixel.join(':')\r\n            if (!colors[colorKey]) {\r\n                colors[colorKey] = 0\r\n            }\r\n\r\n            // add one to represent this current pixel\r\n            // we're going to use this to basically create more powerful enemies later into the level\r\n            colors[colorKey]++\r\n\r\n            let enemy = {\r\n                pixel: pixel,\r\n                index: i\r\n            }\r\n            // determine what type of enemy to make\r\n            if (colors[colorKey] < advancedEnemyProportion) {\r\n                // make a normal pixel\r\n                enemy.type = ENEMY_TYPE_PIXEL\r\n            } else if (colors[colorKey] < (2 * advancedEnemyProportion)) {\r\n                // make an advanced enemy??\r\n                // roll a dice re: what kind\r\n                enemy.type = ENEMY_TYPE_ADVANCED\r\n            } else {\r\n                // make a boss -- reduce the count proportionally to make it less likely to happen again\r\n                // we don't want more than 1 boss per 10 advanced enemies\r\n                colors[colorKey] -= 10\r\n                enemy.type = ENEMY_TYPE_BOSS\r\n            }\r\n\r\n            this.enemyQueue.push(enemy)\r\n        })\r\n\r\n        // now reverse the enemy queue because we're going to be popping off the top\r\n        // and we constructed it such that the advanced enemies and bosses are at the end\r\n        this.enemyQueue.reverse()\r\n    }\r\n\r\n    // this function should determine the type of enemy to create (based on the enemy data\r\n    createEnemyInstanceFromEnemyData(enemyData) {\r\n        let enemyInstance\r\n\r\n        let worldWidth = this.getWorld().getBounding().width\r\n        enemyData.x = 0.8 * worldWidth * Math.random() + (0.1 * worldWidth)\r\n        enemyData.y = -100\r\n\r\n        switch (enemyData.type) {\r\n            case ENEMY_TYPE_PIXEL:\r\n                enemyInstance = new PixelEnemy(enemyData)\r\n                break;\r\n        }\r\n\r\n        if (!enemyInstance) {\r\n            throw \"Invalid enemy data\"\r\n        }\r\n\r\n        this.getWorld().addInstance(enemyInstance)\r\n    }\r\n\r\n    exit() {\r\n        this.getWorld().removeAllInstance()\r\n        this.getWorld().removeAllParticleEmitters()\r\n        console.log(\"EXITED ENEMY CONTROLLER\")\r\n    }\r\n}\r\n\r\nconst enemyDataStruct = {\r\n    type: '', // the type of this enemy\r\n    pixel: '', // the pixel value (health) for this enemy\r\n    index: '', // this pixel's index in the array\r\n}\r\n\r\nmodule.exports = EnemyController","const PixelSprite = require('../sprites/enemies/pixel')\r\nconst TC = require('../../../../TwoCylinder/dist/twocylinder')\r\nconst Enemy = require('./enemy')\r\n\r\nconst MAX_SPEED = 5\r\nconst NEAR_MARGIN = 100\r\n\r\nclass Pixel extends Enemy {\r\n    static get healthMultiplier() { return 1 }\r\n    static get size() { return 30 }\r\n\r\n    constructor(options) {\r\n        options.bounding = new TC.Engine.BoundingBox({\r\n            width: Pixel.size,\r\n            height: Pixel.size,\r\n        })\r\n        // they share a bounding\r\n        options.appearance = new PixelSprite({\r\n            bounding: options.bounding\r\n        })\r\n        super(options)\r\n\r\n        // face straight down\r\n        this.setDirection(Math.PI / 2)\r\n        this.targetSpeed = 3\r\n        this.setSpeed(3)\r\n\r\n    }\r\n\r\n    postStep() {\r\n        super.postStep(...arguments)\r\n\r\n        if (this.getSpeed() === this.targetSpeed) {\r\n            this.targetSpeed = Math.round(MAX_SPEED * Math.random())\r\n            let straightDown = Math.PI / 2\r\n            this.targetDirection = (Math.random() * Math.PI / 2) + (Math.PI / 4)\r\n\r\n            if (this.getPosition().x < NEAR_MARGIN && this.targetDirection > straightDown) {\r\n                this.targetDirection = straightDown\r\n            } else if (this.getPosition().x > (this.getWorld().getBounding().width - NEAR_MARGIN) && this.targetDirection < straightDown) {\r\n                this.targetDirection = straightDown\r\n            }\r\n        } else {\r\n            let difference = this.targetSpeed - this.getSpeed()\r\n            let isLessThan = difference < 0\r\n            let maxAmount = 0.05\r\n            this.setSpeed(this.getSpeed() + ((isLessThan ? -1 : 1) * Math.min(maxAmount, Math.abs(difference))))\r\n\r\n            difference = this.targetDirection - this.getDirection()\r\n            isLessThan = difference < 0\r\n            this.setDirection(this.getDirection() + ((isLessThan ? -1 : 1) * Math.min(maxAmount, Math.abs(difference))))\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Pixel","const EnemySprite = require('./enemy')\r\n\r\nclass Pixel extends EnemySprite {\r\n    drawNormal(canvas, x, y, entity) {\r\n        const {\r\n            context,\r\n            sideSize,\r\n            startingX,\r\n            startingY,\r\n            borderRadius\r\n        } = this.__getDrawConsts(...arguments)\r\n\r\n        this.drawRoundedRectangle(context, startingX, startingY, sideSize, sideSize, entity.getColorStyle(), borderRadius)\r\n    }\r\n    drawDamaged(canvas, x, y, entity) {\r\n\r\n    }\r\n    drawHealth(canvas, x, y, entity) {\r\n        const {\r\n            context,\r\n            sideSize,\r\n            startingX,\r\n            startingY,\r\n            borderRadius\r\n        } = this.__getDrawConsts(...arguments)\r\n\r\n        const barWidth = sideSize/3\r\n\r\n        // draw a full black rounded rectangle\r\n        this.drawRoundedRectangle(context, startingX, startingY, sideSize, sideSize, '#000000', borderRadius)\r\n\r\n        // on top of that, we draw the health ------------\r\n        // first the Cyan healthbar\r\n        if (entity.getHP(entity.constructor.HP_CYAN) > 0) {\r\n            let cyanBorders = [borderRadius, 0, 0, borderRadius]\r\n            let cyanStartingChange = 0\r\n\r\n            if (entity.getHP(entity.constructor.HP_CYAN) !== entity.constructor.healthMultiplier) {\r\n                cyanBorders[0] = 0\r\n                cyanStartingChange = sideSize * ( 1 - (entity.getHP(entity.constructor.HP_CYAN) / entity.constructor.healthMultiplier))\r\n            }\r\n            this.drawRoundedRectangle(context, startingX, startingY + cyanStartingChange, barWidth, sideSize - cyanStartingChange, EnemySprite.COLOR_CYAN, cyanBorders)\r\n        }\r\n\r\n        if (entity.getHP(entity.constructor.HP_MAGENTA) > 0) {\r\n            let magentaStartingChange = 0\r\n\r\n            if (entity.getHP(entity.constructor.HP_MAGENTA) !== entity.constructor.healthMultiplier) {\r\n                magentaStartingChange = sideSize * (1 - (entity.getHP(entity.constructor.HP_MAGENTA) / entity.constructor.healthMultiplier))\r\n            }\r\n\r\n            // draw a regular rectangle for the middle one\r\n            context.fillStyle = EnemySprite.COLOR_MAGENTA\r\n            context.rect(startingX + barWidth, startingY + magentaStartingChange, barWidth, sideSize - magentaStartingChange)\r\n            context.fill()\r\n        }\r\n\r\n        if (entity.getHP(entity.constructor.HP_YELLOW) > 0) {\r\n            let yellowBorders = [0, borderRadius, borderRadius, 0]\r\n            let yellowStartingChange = 0\r\n\r\n            if (entity.getHP(entity.constructor.HP_YELLOW) !== entity.constructor.healthMultiplier) {\r\n                yellowBorders[1] = 0\r\n                yellowStartingChange = sideSize * ( 1 - (entity.getHP(entity.constructor.HP_YELLOW) / entity.constructor.healthMultiplier))\r\n            }\r\n            this.drawRoundedRectangle(context, startingX + (2 * barWidth), startingY + yellowStartingChange, barWidth, sideSize - yellowStartingChange, EnemySprite.COLOR_YELLOW, yellowBorders)\r\n        }\r\n    }\r\n    drawDying(canvas, x, y, entity) {\r\n\r\n    }\r\n\r\n    drawRoundedRectangle(context, startingX, startingY, width, height, color, radius) {\r\n        // Re-purposed from https://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas\r\n        if (typeof radius === 'number') {\r\n            radius = [radius, radius, radius, radius]\r\n        }\r\n\r\n        // radius is an array of radiuses\r\n        //  0__1\r\n        //  |__|\r\n        //  3  4\r\n\r\n        context.beginPath()\r\n        context.fillStyle = color\r\n        context.moveTo(startingX + radius[0], startingY)\r\n        context.lineTo(startingX + width - radius[1], startingY)\r\n        context.quadraticCurveTo(startingX + width, startingY, startingX + width, startingY + radius[1])\r\n        context.lineTo(startingX + width, startingY + height - radius[2])\r\n        context.quadraticCurveTo(startingX + width, startingY + height, startingX + width - radius[2], startingY + height)\r\n        context.lineTo(startingX + radius[3], startingY + height)\r\n        context.quadraticCurveTo(startingX, startingY + height, startingX, startingY + height - radius[3])\r\n        context.lineTo(startingX, startingY + radius[0])\r\n        context.quadraticCurveTo(startingX, startingY, startingX + radius[0], startingY)\r\n        context.closePath()\r\n        context.fill()\r\n    }\r\n\r\n    __getDrawConsts(canvas, x, y, entity) {\r\n        const sideSize = this.getBounding().width\r\n        const halfSide = (sideSize/2)\r\n        return {\r\n            context: canvas.getContext('2d'),\r\n            sideSize: sideSize,\r\n            // x and y represent the center of our drawing, but our drawing starts at the corner so we need to move up and over half the length of a side\r\n            startingX : x - halfSide,\r\n            startingY : y - halfSide,\r\n            borderRadius: 3\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Pixel","const TC = require('../../../../../TwoCylinder/dist/twocylinder')\r\nconst EnemyEntity = require('../../enemies/enemy')\r\n\r\nfunction hasHealthChanged(health1, health2) {\r\n    if (!health2 || !health1) {\r\n        return false\r\n    }\r\n    return !(health1[EnemyEntity.HP_CYAN] === health2[EnemyEntity.HP_CYAN]\r\n        && health1[EnemyEntity.HP_MAGENTA] === health2[EnemyEntity.HP_MAGENTA]\r\n        && health1[EnemyEntity.HP_YELLOW] === health2[EnemyEntity.HP_YELLOW])\r\n}\r\n\r\nfunction hasHealthRemaining(health) {\r\n    return !(health[EnemyEntity.HP_CYAN] === 0\r\n        && health[EnemyEntity.HP_MAGENTA] === 0\r\n        && health[EnemyEntity.HP_YELLOW] === 0)\r\n}\r\n\r\nclass Enemy extends TC.Engine.Appearance {\r\n    static get COLOR_CYAN() { return '#00FFFF'; }\r\n    static get COLOR_MAGENTA() { return '#FF00FF'; }\r\n    static get COLOR_YELLOW() { return '#FFFF00'; }\r\n\r\n    constructor(options) {\r\n        super(options)\r\n\r\n        this.memoizedHealth = undefined\r\n        this.drawingAnimation = undefined\r\n        this.showingHP = false\r\n    }\r\n\r\n    draw (canvas, x, y, entity) {\r\n        if (typeof this.drawingAnimation === 'function') {\r\n            return this.drawingAnimation(...arguments)\r\n        }\r\n\r\n        let currentHealth = entity.getHP()\r\n        if (hasHealthChanged(currentHealth, this.memoizedHealth)) {\r\n            this.drawDamaged(...arguments)\r\n        } else if (this.showingHP) {\r\n            this.drawHealth(...arguments)\r\n        } else if (!hasHealthRemaining(currentHealth)) {\r\n            this.drawDying()\r\n        } else {\r\n            this.drawNormal(...arguments)\r\n        }\r\n\r\n        this.memoizedHealth = currentHealth\r\n    }\r\n\r\n    drawNormal(canvas, x, y, entity) {}\r\n    drawDamaged(canvas, x, y, entity) {}\r\n    drawHealth(canvas, x, y, entity) {}\r\n    drawDying(canvas, x, y, entity) {}\r\n}\r\n\r\nmodule.exports = Enemy","const MMCQ = require('../color-map')\r\n\r\nclass Level {\r\n    constructor(data) {\r\n        this.name = data.name\r\n        this.imageFile = data.image\r\n        this.colorCount = data.colorCount || 8\r\n        this.imageData = Level.imageDataFromImage(this.imageFile, this.colorCount)\r\n    }\r\n\r\n    getImageData() {\r\n        return this.imageData\r\n    }\r\n\r\n    getColorCount() {\r\n        return this.colorCount\r\n    }\r\n\r\n    static imageDataFromImage(imgFile, numberOfColors) {\r\n        let canvas = window.document.createElement('canvas')\r\n        canvas.width = imgFile.width\r\n        canvas.height = imgFile.height\r\n\r\n        canvas.getContext('2d').drawImage(imgFile, 0, 0, imgFile.width, imgFile.height)\r\n        let pixelData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height).data;\r\n\r\n        // pixel data is a linear array of every pixel represented as a sequence of 4 integers (RGBA)\r\n        // our quantize function wants each pixel to be its own array of length 3 (RGB)\r\n        // so we loop through and re-package the single dimension array into a 2 dimensional one\r\n        let formattedData = [];\r\n        for (let i=0; i<pixelData.length; i+=4) {\r\n            formattedData.push([\r\n                pixelData[i], pixelData[i+1], pixelData[i+2] //NOTE, not i+3 because we don't want alpha channel\r\n            ]);\r\n        }\r\n\r\n        // reduce our image colorset\r\n        let cmap = MMCQ.quantize(formattedData, numberOfColors)\r\n\r\n        // return the new image data\r\n        return formattedData.map(function(p) {\r\n            return cmap.map(p);\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Level","/**\r\n * Basic Javascript port of the MMCQ (modified median cut quantization)\r\n * algorithm from the Leptonica library (http://www.leptonica.com/).\r\n * Returns a color map you can use to map original pixels to the reduced\r\n * palette. Still a work in progress.\r\n *\r\n * @author Nick Rabinowitz\r\n * @example\r\n// array of pixels as [R,G,B] arrays\r\nvar myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]\r\n                // etc\r\n                ];\r\nvar maxColors = 4;\r\nvar cmap = MMCQ.quantize(myPixels, maxColors);\r\nvar newPalette = cmap.palette();\r\nvar newPixels = myPixels.map(function(p) {\r\n    return cmap.map(p);\r\n});\r\n */\r\n\r\nconst pv = {\r\n    map: function(array, f) {\r\n      var o = {};\r\n      return f ? array.map(function(d, i) { o.index = i; return f.call(o, d); }) : array.slice();\r\n    },\r\n    naturalOrder: function(a, b) {\r\n        return (a < b) ? -1 : ((a > b) ? 1 : 0);\r\n    },\r\n    sum: function(array, f) {\r\n      var o = {};\r\n      return array.reduce(f ? function(p, d, i) { o.index = i; return p + f.call(o, d); } : function(p, d) { return p + d; }, 0);\r\n    },\r\n    max: function(array, f) {\r\n      return Math.max.apply(null, f ? pv.map(array, f) : array);\r\n    }\r\n};\r\n\r\nconst MMCQ = (function() {\r\n    // private constants\r\n    var sigbits = 5,\r\n        rshift = 8 - sigbits,\r\n        maxIterations = 1000,\r\n        fractByPopulations = 0.75;\r\n\r\n    // get reduced-space color index for a pixel\r\n    function getColorIndex(r, g, b) {\r\n        return (r << (2 * sigbits)) + (g << sigbits) + b;\r\n    }\r\n\r\n    // Simple priority queue\r\n    function PQueue(comparator) {\r\n        var contents = [],\r\n            sorted = false;\r\n\r\n        function sort() {\r\n            contents.sort(comparator);\r\n            sorted = true;\r\n        }\r\n\r\n        return {\r\n            push: function(o) {\r\n                contents.push(o);\r\n                sorted = false;\r\n            },\r\n            peek: function(index) {\r\n                if (!sorted) sort();\r\n                if (index===undefined) index = contents.length - 1;\r\n                return contents[index];\r\n            },\r\n            pop: function() {\r\n                if (!sorted) sort();\r\n                return contents.pop();\r\n            },\r\n            size: function() {\r\n                return contents.length;\r\n            },\r\n            map: function(f) {\r\n                return contents.map(f);\r\n            },\r\n            debug: function() {\r\n                if (!sorted) sort();\r\n                return contents;\r\n            }\r\n        };\r\n    }\r\n\r\n    // 3d color space box\r\n    function VBox(r1, r2, g1, g2, b1, b2, histo) {\r\n        var vbox = this;\r\n        vbox.r1 = r1;\r\n        vbox.r2 = r2;\r\n        vbox.g1 = g1;\r\n        vbox.g2 = g2;\r\n        vbox.b1 = b1;\r\n        vbox.b2 = b2;\r\n        vbox.histo = histo;\r\n    }\r\n    VBox.prototype = {\r\n        volume: function(force) {\r\n            var vbox = this;\r\n            if (!vbox._volume || force) {\r\n                vbox._volume = ((vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1));\r\n            }\r\n            return vbox._volume;\r\n        },\r\n        count: function(force) {\r\n            var vbox = this,\r\n                histo = vbox.histo;\r\n            if (!vbox._count_set || force) {\r\n                var npix = 0,\r\n                    index, i, j, k;\r\n                for (i = vbox.r1; i <= vbox.r2; i++) {\r\n                    for (j = vbox.g1; j <= vbox.g2; j++) {\r\n                        for (k = vbox.b1; k <= vbox.b2; k++) {\r\n                             index = getColorIndex(i,j,k);\r\n                             npix += (histo[index] || 0);\r\n                        }\r\n                    }\r\n                }\r\n                vbox._count = npix;\r\n                vbox._count_set = true;\r\n            }\r\n            return vbox._count;\r\n        },\r\n        copy: function() {\r\n            var vbox = this;\r\n            return new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);\r\n        },\r\n        avg: function(force) {\r\n            var vbox = this,\r\n                histo = vbox.histo;\r\n            if (!vbox._avg || force) {\r\n                var ntot = 0,\r\n                    mult = 1 << (8 - sigbits),\r\n                    rsum = 0,\r\n                    gsum = 0,\r\n                    bsum = 0,\r\n                    hval,\r\n                    i, j, k, histoindex;\r\n                for (i = vbox.r1; i <= vbox.r2; i++) {\r\n                    for (j = vbox.g1; j <= vbox.g2; j++) {\r\n                        for (k = vbox.b1; k <= vbox.b2; k++) {\r\n                             histoindex = getColorIndex(i,j,k);\r\n                             hval = histo[histoindex] || 0;\r\n                             ntot += hval;\r\n                             rsum += (hval * (i + 0.5) * mult);\r\n                             gsum += (hval * (j + 0.5) * mult);\r\n                             bsum += (hval * (k + 0.5) * mult);\r\n                        }\r\n                    }\r\n                }\r\n                if (ntot) {\r\n                    vbox._avg = [~~(rsum/ntot), ~~(gsum/ntot), ~~(bsum/ntot)];\r\n                } else {\r\n//                    console.log('empty box');\r\n                    vbox._avg = [\r\n                        ~~(mult * (vbox.r1 + vbox.r2 + 1) / 2),\r\n                        ~~(mult * (vbox.g1 + vbox.g2 + 1) / 2),\r\n                        ~~(mult * (vbox.b1 + vbox.b2 + 1) / 2)\r\n                    ];\r\n                }\r\n            }\r\n            return vbox._avg;\r\n        },\r\n        contains: function(pixel) {\r\n            var vbox = this,\r\n                rval = pixel[0] >> rshift;\r\n                gval = pixel[1] >> rshift;\r\n                bval = pixel[2] >> rshift;\r\n            return (rval >= vbox.r1 && rval <= vbox.r2 &&\r\n                    gval >= vbox.g1 && gval <= vbox.g2 &&\r\n                    bval >= vbox.b1 && bval <= vbox.b2);\r\n        }\r\n    };\r\n\r\n    // Color map\r\n    function CMap() {\r\n        this.vboxes = new PQueue(function(a,b) {\r\n            return pv.naturalOrder(\r\n                a.vbox.count()*a.vbox.volume(),\r\n                b.vbox.count()*b.vbox.volume()\r\n            );\r\n        });\r\n    }\r\n    CMap.prototype = {\r\n        push: function(vbox) {\r\n            this.vboxes.push({\r\n                vbox: vbox,\r\n                color: vbox.avg()\r\n            });\r\n        },\r\n        palette: function() {\r\n            return this.vboxes.map(function(vb) { return vb.color; });\r\n        },\r\n        size: function() {\r\n            return this.vboxes.size();\r\n        },\r\n        map: function(color) {\r\n            var vboxes = this.vboxes;\r\n            for (var i=0; i<vboxes.size(); i++) {\r\n                if (vboxes.peek(i).vbox.contains(color)) {\r\n                    return vboxes.peek(i).color;\r\n                }\r\n            }\r\n            return this.nearest(color);\r\n        },\r\n        nearest: function(color) {\r\n            var vboxes = this.vboxes,\r\n                d1, d2, pColor;\r\n            for (var i=0; i<vboxes.size(); i++) {\r\n                d2 = Math.sqrt(\r\n                    Math.pow(color[0] - vboxes.peek(i).color[0], 2) +\r\n                    Math.pow(color[1] - vboxes.peek(i).color[1], 2) +\r\n                    Math.pow(color[2] - vboxes.peek(i).color[2], 2)\r\n                );\r\n                if (d2 < d1 || d1 === undefined) {\r\n                    d1 = d2;\r\n                    pColor = vboxes.peek(i).color;\r\n                }\r\n            }\r\n            return pColor;\r\n        },\r\n        forcebw: function() {\r\n            // XXX: won't  work yet\r\n            var vboxes = this.vboxes;\r\n            vboxes.sort(function(a,b) { return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));});\r\n\r\n            // force darkest color to black if everything < 5\r\n            var lowest = vboxes[0].color;\r\n            if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5)\r\n                vboxes[0].color = [0,0,0];\r\n\r\n            // force lightest color to white if everything > 251\r\n            var idx = vboxes.length-1,\r\n                highest = vboxes[idx].color;\r\n            if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251)\r\n                vboxes[idx].color = [255,255,255];\r\n        }\r\n    };\r\n\r\n    // histo (1-d array, giving the number of pixels in\r\n    // each quantized region of color space), or null on error\r\n    function getHisto(pixels) {\r\n        var histosize = 1 << (3 * sigbits),\r\n            histo = new Array(histosize),\r\n            index, rval, gval, bval;\r\n        pixels.forEach(function(pixel) {\r\n            rval = pixel[0] >> rshift;\r\n            gval = pixel[1] >> rshift;\r\n            bval = pixel[2] >> rshift;\r\n            index = getColorIndex(rval, gval, bval);\r\n            histo[index] = (histo[index] || 0) + 1;\r\n        });\r\n        return histo;\r\n    }\r\n\r\n    function vboxFromPixels(pixels, histo) {\r\n        var rmin=1000000, rmax=0,\r\n            gmin=1000000, gmax=0,\r\n            bmin=1000000, bmax=0,\r\n            rval, gval, bval;\r\n        // find min/max\r\n        pixels.forEach(function(pixel) {\r\n            rval = pixel[0] >> rshift;\r\n            gval = pixel[1] >> rshift;\r\n            bval = pixel[2] >> rshift;\r\n            if (rval < rmin) rmin = rval;\r\n            else if (rval > rmax) rmax = rval;\r\n            if (gval < gmin) gmin = gval;\r\n            else if (gval > gmax) gmax = gval;\r\n            if (bval < bmin) bmin = bval;\r\n            else if (bval > bmax)  bmax = bval;\r\n        });\r\n        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);\r\n    }\r\n\r\n    function medianCutApply(histo, vbox) {\r\n        if (!vbox.count()) return;\r\n\r\n        var rw = vbox.r2 - vbox.r1 + 1,\r\n            gw = vbox.g2 - vbox.g1 + 1,\r\n            bw = vbox.b2 - vbox.b1 + 1,\r\n            maxw = pv.max([rw, gw, bw]);\r\n        // only one pixel, no split\r\n        if (vbox.count() == 1) {\r\n            return [vbox.copy()];\r\n        }\r\n        /* Find the partial sum arrays along the selected axis. */\r\n        var total = 0,\r\n            partialsum = [],\r\n            lookaheadsum = [],\r\n            i, j, k, sum, index;\r\n        if (maxw == rw) {\r\n            for (i = vbox.r1; i <= vbox.r2; i++) {\r\n                sum = 0;\r\n                for (j = vbox.g1; j <= vbox.g2; j++) {\r\n                    for (k = vbox.b1; k <= vbox.b2; k++) {\r\n                        index = getColorIndex(i,j,k);\r\n                        sum += (histo[index] || 0);\r\n                    }\r\n                }\r\n                total += sum;\r\n                partialsum[i] = total;\r\n            }\r\n        }\r\n        else if (maxw == gw) {\r\n            for (i = vbox.g1; i <= vbox.g2; i++) {\r\n                sum = 0;\r\n                for (j = vbox.r1; j <= vbox.r2; j++) {\r\n                    for (k = vbox.b1; k <= vbox.b2; k++) {\r\n                        index = getColorIndex(j,i,k);\r\n                        sum += (histo[index] || 0);\r\n                    }\r\n                }\r\n                total += sum;\r\n                partialsum[i] = total;\r\n            }\r\n        }\r\n        else {  /* maxw == bw */\r\n            for (i = vbox.b1; i <= vbox.b2; i++) {\r\n                sum = 0;\r\n                for (j = vbox.r1; j <= vbox.r2; j++) {\r\n                    for (k = vbox.g1; k <= vbox.g2; k++) {\r\n                        index = getColorIndex(j,k,i);\r\n                        sum += (histo[index] || 0);\r\n                    }\r\n                }\r\n                total += sum;\r\n                partialsum[i] = total;\r\n            }\r\n        }\r\n        partialsum.forEach(function(d,i) {\r\n            lookaheadsum[i] = total-d;\r\n        });\r\n        function doCut(color) {\r\n            var dim1 = color + '1',\r\n                dim2 = color + '2',\r\n                left, right, vbox1, vbox2, d2, count2=0;\r\n            for (i = vbox[dim1]; i <= vbox[dim2]; i++) {\r\n                if (partialsum[i] > total / 2) {\r\n                    vbox1 = vbox.copy();\r\n                    vbox2 = vbox.copy();\r\n                    left = i - vbox[dim1];\r\n                    right = vbox[dim2] - i;\r\n                    if (left <= right)\r\n                        d2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));\r\n                    else d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));\r\n                    // avoid 0-count boxes\r\n                    while (!partialsum[d2]) d2++;\r\n                    count2 = lookaheadsum[d2];\r\n                    while (!count2 && partialsum[d2-1]) count2 = lookaheadsum[--d2];\r\n                    // set dimensions\r\n                    vbox1[dim2] = d2;\r\n                    vbox2[dim1] = vbox1[dim2] + 1;\r\n//                    console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());\r\n                    return [vbox1, vbox2];\r\n                }\r\n            }\r\n\r\n        }\r\n        // determine the cut planes\r\n        return maxw == rw ? doCut('r') :\r\n            maxw == gw ? doCut('g') :\r\n            doCut('b');\r\n    }\r\n\r\n    function quantize(pixels, maxcolors) {\r\n        // short-circuit\r\n        if (!pixels.length || maxcolors < 2 || maxcolors > 256) {\r\n//            console.log('wrong number of maxcolors');\r\n            return false;\r\n        }\r\n\r\n        // XXX: check color content and convert to grayscale if insufficient\r\n\r\n        var histo = getHisto(pixels),\r\n            histosize = 1 << (3 * sigbits);\r\n\r\n        // check that we aren't below maxcolors already\r\n        var nColors = 0;\r\n        histo.forEach(function() { nColors++; });\r\n        if (nColors <= maxcolors) {\r\n            // XXX: generate the new colors from the histo and return\r\n        }\r\n\r\n        // get the beginning vbox from the colors\r\n        var vbox = vboxFromPixels(pixels, histo),\r\n            pq = new PQueue(function(a,b) { return pv.naturalOrder(a.count(), b.count()); });\r\n        pq.push(vbox);\r\n\r\n        // inner function to do the iteration\r\n        function iter(lh, target) {\r\n            var ncolors = 1,\r\n                niters = 0,\r\n                vbox;\r\n            while (niters < maxIterations) {\r\n                vbox = lh.pop();\r\n                if (!vbox.count())  { /* just put it back */\r\n                    lh.push(vbox);\r\n                    niters++;\r\n                    continue;\r\n                }\r\n                // do the cut\r\n                var vboxes = medianCutApply(histo, vbox),\r\n                    vbox1 = vboxes[0],\r\n                    vbox2 = vboxes[1];\r\n\r\n                if (!vbox1) {\r\n//                    console.log(\"vbox1 not defined; shouldn't happen!\");\r\n                    return;\r\n                }\r\n                lh.push(vbox1);\r\n                if (vbox2) {  /* vbox2 can be null */\r\n                    lh.push(vbox2);\r\n                    ncolors++;\r\n                }\r\n                if (ncolors >= target) return;\r\n                if (niters++ > maxIterations) {\r\n//                    console.log(\"infinite loop; perhaps too few pixels!\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        // first set of colors, sorted by population\r\n        iter(pq, fractByPopulations * maxcolors);\r\n\r\n        // Re-sort by the product of pixel occupancy times the size in color space.\r\n        var pq2 = new PQueue(function(a,b) {\r\n            return pv.naturalOrder(a.count()*a.volume(), b.count()*b.volume());\r\n        });\r\n        while (pq.size()) {\r\n            pq2.push(pq.pop());\r\n        }\r\n\r\n        // next set - generate the median cuts using the (npix * vol) sorting.\r\n        iter(pq2, maxcolors - pq2.size());\r\n\r\n        // calculate the actual colors\r\n        var cmap = new CMap();\r\n        while (pq2.size()) {\r\n            cmap.push(pq2.pop());\r\n        }\r\n\r\n        return cmap;\r\n    }\r\n\r\n    return {\r\n        quantize: quantize\r\n    };\r\n})();\r\n\r\nmodule.exports = MMCQ","const TC = require('../../../TwoCylinder/dist/twocylinder')\r\nconst PlayerSprite = require('./sprites/player')\r\n\r\nclass Player extends TC.Engine.Entity {\r\n    constructor(options) {\r\n        options.bounding = new TC.Engine.BoundingBox({\r\n            origin_x: 350,\r\n            origin_y: 600,\r\n            width: 50,\r\n            height: 88,\r\n        })\r\n        // they share a bounding\r\n        options.appearance = new PlayerSprite({\r\n            bounding: options.bounding\r\n        })\r\n        super(options)\r\n    }\r\n\r\n    getAmmoColor(opacity) {\r\n        if (opacity === undefined) {\r\n            opacity = 1\r\n        }\r\n\r\n        // TODO: Determine the actual color based on what ammo is being used\r\n        let color = PlayerSprite.COLOR_CYAN;\r\n\r\n        if (opacity !== 1) {\r\n            return color.replace(',1)',','+opacity+')');\r\n        } else {\r\n            return color\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Player","const TC = require('../../../../TwoCylinder/dist/twocylinder')\r\n\r\nconst muzzleWidth = 5\r\nconst muzzleHeight = muzzleWidth * 4\r\nconst barrelWidth = 17\r\nconst barrelHeight = barrelWidth * 3\r\nconst stockWidth = 25\r\nconst stockHeight = stockWidth * 1.4\r\nconst turretRadius = 24\r\nconst visionWidth = barrelWidth\r\nconst visionHeight = visionWidth * 1.4\r\n\r\nclass Player extends TC.Engine.Appearance {\r\n    static get COLOR_CYAN() { return 'rgba(0,255,255,1)'; }\r\n    static get COLOR_MAGENTA() { return 'rgba(255,0,255,1)'; }\r\n    static get COLOR_YELLOW() { return 'rgba(255,255,0,1)'; }\r\n\r\n    static get COLOR_BLUE() { return 'rgba(0,0,255,1)'; }\r\n    static get COLOR_RED() { return 'rgba(255,0,0,1)'; }\r\n    static get COLOR_GREEN() { return 'rgba(0,255,0,1)'; }\r\n\r\n    static get COLOR_BLACK() { return 'rgba(0,0,0,1)'; }\r\n\r\n    constructor(options) {\r\n        super(options)\r\n    }\r\n\r\n    draw (canvas, x, y, entity) {\r\n        const {\r\n            context,\r\n            width,\r\n            height,\r\n            originX,\r\n            originY\r\n        } = this.__getDrawConsts(...arguments)\r\n\r\n        // the difference between the top/left of our drawing and the center of our entity\r\n        let ydiff = y - originY;\r\n        let xdiff = x - originX;\r\n        context.translate(x, y)\r\n        // we rotate an extra 90degrees because we draw with 0 at 12:00, but really 0 degrees is at 3:00 (on a clock)\r\n        context.rotate(entity.getDirection() + Math.PI/2)\r\n        this.drawTurret(context, 0, 0)\r\n        this.drawMuzzle(context, -muzzleWidth / 2, -ydiff)\r\n        this.drawBarrel(context, -barrelWidth / 2, -ydiff + muzzleHeight)\r\n        this.drawStock(context, -stockWidth / 2, -ydiff + muzzleHeight + barrelHeight)\r\n        this.drawVision(context, barrelWidth / 2, -ydiff + muzzleHeight + barrelHeight, entity)\r\n        if (window.DEBUG) {\r\n            context.beginPath()\r\n            context.strokeStyle = '#777';\r\n            context.fillStyle = 'rgba(0,0,0,0.1)'\r\n            // Shift back the muzzle height -- @see __getDrawConsts\r\n            context.rect(-xdiff, -ydiff + muzzleHeight, width, height);\r\n            context.fill()\r\n            context.stroke()\r\n            context.closePath()\r\n        }\r\n        context.rotate(-entity.getDirection() - Math.PI/2)\r\n        context.translate(-x, -y)\r\n\r\n    }\r\n\r\n    drawMuzzle(context, originX, originY) {\r\n        context.beginPath()\r\n        context.fillStyle = '#333'\r\n        context.rect(originX, originY, muzzleWidth, muzzleHeight)\r\n        context.fill()\r\n    }\r\n\r\n    drawBarrel(context, originX, originY) {\r\n        context.beginPath()\r\n        let gradient = context.createLinearGradient(originX, originY, originX + barrelWidth, originY)\r\n        gradient.addColorStop(0, '#ddd')\r\n        gradient.addColorStop(.33, '#fff')\r\n        gradient.addColorStop(.66, '#fff')\r\n        gradient.addColorStop(1, '#ddd')\r\n        context.fillStyle = gradient\r\n        context.rect(originX, originY, barrelWidth, barrelHeight)\r\n        context.fill()\r\n    }\r\n\r\n    drawStock(context, originX, originY) {\r\n        context.beginPath()\r\n        context.fillStyle = '#fff'\r\n        context.strokeStyle = '#ddd'\r\n        context.rect(originX, originY, stockWidth, stockHeight)\r\n        context.fill()\r\n        context.stroke()\r\n    }\r\n\r\n    drawTurret(context, turretCenterX, turretCenterY) {\r\n        context.beginPath()\r\n        context.arc(turretCenterX, turretCenterY, turretRadius, 0, TC.Utilities.Constants.TAU)\r\n        context.fillStyle = '#ddd'\r\n        context.strokeStyle = '#ccc'\r\n        context.fill()\r\n        context.stroke()\r\n    }\r\n\r\n    drawVision(context, originX, originY, entity) {\r\n        let bulbRadius = visionWidth/2\r\n        let bulbX = originX + bulbRadius\r\n        let bulbY = originY + bulbRadius\r\n\r\n        // draw the bulb + shine\r\n        context.beginPath()\r\n        let shine = context.createRadialGradient(bulbX, bulbY, bulbRadius, bulbX, bulbY, visionWidth);\r\n        shine.addColorStop(0, entity.getAmmoColor())\r\n        shine.addColorStop(0.1, entity.getAmmoColor(0.5))\r\n        shine.addColorStop(1, entity.getAmmoColor(0))\r\n        context.arc(bulbX, bulbY, visionWidth, 0, TC.Utilities.Constants.TAU)\r\n        context.fillStyle = shine\r\n        context.fill()\r\n\r\n        // draw the camera body\r\n        context.beginPath()\r\n        context.fillStyle = '#fff'\r\n        context.strokeStyle = '#ddd'\r\n        context.rect(originX, originY + bulbRadius, visionWidth, visionHeight)\r\n        context.fill()\r\n        context.stroke()\r\n    }\r\n\r\n    __getDrawConsts(canvas, x, y, entity) {\r\n        let box = this.getBounding().getContainingRectangle()\r\n        return {\r\n            context: canvas.getContext('2d'),\r\n            width: box.width,\r\n            height: box.height,\r\n            originX : box.origin_x,\r\n\r\n            // we don't want to include the muzzle in our collision box so we shift the entire drawing up that amount\r\n            // and the bounding box is sized to include the rest of the turret\r\n            originY : box.origin_y - muzzleHeight\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Player","const TC = require('../../../../TwoCylinder/dist/twocylinder')\r\n\r\nclass MouseControl extends TC.IO.Touch {\r\n    constructor (options) {\r\n        super(Object.assign({\r\n            double : 0\r\n            ,tap : 0\r\n            ,tap_distance : 0\r\n        }, options))\r\n        this.__player = options.player\r\n\r\n        this.onMove((evt) => {\r\n            this.__player.setDirection(TC.Utilities.Geometry.angleToPoint(this.__player.getBounding().getCenter(), evt.getWorldCenter()))\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = MouseControl"],"sourceRoot":""}